<sect1 id="picolcd">
<title>The Mini-Box.com USB LCD picoLCD Driver</title>

<para>
	This section covers the installation and use of the Mini-Box USB LCD displays.
</para>

<sect2 id="picolcd-displays">
<title>Displays</title>
<para>
	<ulink url="http://www.mini-box.com/">Mini-Box.com</ulink> offers two types of
	USB LCD displays:
</para>

<variablelist>
<varlistentry>
<term>PicoLCD 4x20-Sideshow</term>
<listitem>
<para>
	<ulink url="http://www.mini-box.com/PicoLCD-4X20-Sideshow">PicoLCD 4x20-Sideshow</ulink>
	is the desktop variant targeted at end users.
	It an external USB 2.0 full speed device that comes in a stylish casing and
	sports a 4 line by 20 character display with white letters
	on a blue background, a built-in InfraRed receiver as well as an
	keypad with 8 keys labeled <literal>Escape</literal>, <literal>F1</literal>,
	<literal>F2</literal>, <literal>F3</literal>, <literal>Home</literal>,
	<literal>Up</literal>, <literal>Down</literal> and <literal>Enter</literal>.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term>picoLCD 20x2 (OEM)</term>
<listitem>
<para>
	<ulink url="http://www.mini-box.com/picoLCD-20x2">picoLCD-20x2-OEM</ulink> is
	the OEM version.
	It is a 2 line by 20 character display with black letters on a
	yellow-green background, that can be connected to the system via
	USB, I<superscript>2</superscript>C or USART (the latter two are
	not supported by this driver).
	It  has connectors for an InfraRed receiver, keypad and LEDs.
</para>

<para>
 	When pre-installed in enclosures like the
	<ulink url="http://www.mini-box.com/Mini-Box-M300-LCD">Mini-Box M300 LCD</ulink>
	it comes equipped with an InfraRed receiver as well as key pad with 
	12 keys labeled <literal>Plus</literal>, <literal>Minus</literal>,
	<literal>F1</literal>, <literal>F2</literal>, <literal>F3</literal>,
	<literal>F4</literal>, <literal>F5</literal>, <literal>Up</literal>,
	<literal>Down</literal>, <literal>Left</literal>, <literal>Right</literal>,
	and <literal>Enter</literal>.
</para>

<para>
	Finally, the picoLCD 20x2 (OEM) supports 8 general purpose outputs
	and 10 custom splash screens.
	Although these features are not supported by this driver, the
	splash screens can be changed using the <command>usblcd</command> 
	tool, that can be built from the Linux SDK available on the picoLCD web page.
</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>


<sect2 id="picolcd-requirements">
<title>Requirements</title>

<para>
	The driver is based on the
	<ulink url="http://libusb.sourceforge.net/"><filename>libusb</filename></ulink>
	USB library, which should make it work with Linux, the different BSB variants
	as well as Darwin/MacOS X.

<note>
	<para>
		When using a <filename>libusb</filename> based driver like
		<code>picolcd</code>, <application>LCDd</application>
		needs to be started as root.
	</para>
</note>
</para>

<para>
	On Linux, the only kernel module required is the USB host controller
	driver 	(<filename>uhci_hcd</filename> on the M300) to fire up the USB bus
	to which the LCD is attached.
	For other operating systems, analogous requirements apply.
</para>

<para>
	Lastly, for <filename>libusb</filename> to work correctly,
	the <filename>usbfs</filename> file system must be mounted on
	<filename>/proc/bus/usb</filename>, e.g. using the command
	<code>mount -t usbfs usbfs /proc/bus/usb</code> or by your system's
	default configuration.
</para>
</sect2>



<sect2 id="picolcd-config">
<title>Configuration in LCDd.conf</title>

<sect3 id="picolcd-config-section">
<title>[picolcd]</title>

<variablelist>
<!--
<varlistentry>
  <term>
    <command>Backlight</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    Turn on backlight.
  </para></listitem>
</varlistentry>
-->

<varlistentry>
  <term>
    <command>Brightness</command> =
    <arg choice="plain"><replaceable>BRIGHTNESS</replaceable></arg>
  </term>
  <listitem>
  <para>
    Set the initial brightness.
    Legal values are: <literal>0</literal> - <literal>1000</literal>.
    If not given, it defaults to <literal><emphasis>1000</emphasis></literal>.
  </para>
  </listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Contrast</command> =
    <arg choice="plain"><replaceable>CONTRAST</replaceable></arg>
  </term>
  <listitem><para>
    Contrast: <literal>0</literal>-<literal>1000</literal>.
    <literal>0</literal> is visible, and <literal>1000</literal> is not on my M300.
    Default is <literal><emphasis>1000</emphasis></literal>.			
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>KeyLights</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    Allow key LEDs to be turned on or off. Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Key0Light</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    If <command>Keylights</command> is set, you can disable the directional pad LED by 
    setting this value to <literal>no</literal>.  Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Key1Light</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    If <command>Keylights</command> is set, you can disable the F1 LED by setting this value 
    to <literal>no</literal>.  Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Key2Light</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    If <command>Keylights</command> is set, you can disable the F2 LED by setting this value 
    to <literal>no</literal>.  Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Key3Light</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    If <command>Keylights</command> is set, you can disable the F3 LED by setting this value 
    to <literal>no</literal>.  Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Key4Light</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    If <command>Keylights</command> is set, you can disable the F4 LED by setting this value 
    to <literal>no</literal>.  Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>Key5Light</command> =
    <arg choice="plain">
    <group choice="req">
      <arg choice="plain"><literal><emphasis>yes</emphasis></literal></arg>
      <arg choice="plain"><literal>no</literal></arg>
    </group>
    </arg>
  </term>
  <listitem><para>
    If <command>Keylights</command> is set, you can disable the F5 LED by setting this value 
    to <literal>no</literal>.  Default is <literal>yes</literal>.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>KeyTimeout</command> =
    <arg choice="plain"><replaceable>DURATION</replaceable></arg>
  </term>
  <listitem><para>
    (Advanced) This value controls how long <application>LCDd</application> waits for a key press when 
    get_key() is called.  The value represents microseconds and the default is <literal>500</literal>
    or .5 seconds.  Lowering this value will make LCDd more responsive but also causes LCDd to use 
    more CPU time and, as the timeout grows shorter, key presses become harder to detect.  
    Larger values make key presses more reliable if somewhat slow to take effect.
  </para></listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>LircHost</command> =
    <arg choice="plain"><replaceable>HOSTNAME_OR_IP-ADDRESS</replaceable></arg>
  </term>
  <listitem>
  <para>
    Set the hostname or IP address to which the driver will send IR data from the sensor.
    If not set or set to an empty value, IR support for LIRC will be disabled.
  </para>
  <para>
    LIRC should be configured to use the driver "udp", which will cause it to listen on some 
    UDP port for packets containing a series of integers, representing pulse and mark 
    intervals from the sensor. It doesn't matter whether LCDd or LIRC is started first; if LIRC 
    isn't listening, the packets from LCDd will be discarded. When LIRC comes back, it will 
    start picking up the packets. Similarly, LCDd can be stopped and restarted without affecting 
    anything, because UDP is a connectionless protocol. 
  </para>
  </listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>LircPort</command> =
    <arg choice="plain"><replaceable>PORTNUM</replaceable></arg>
  </term>
  <listitem>
  <para>
    This value determines the UDP port to which the driver will send IR data from the sensor. It
    defaults to <literal>8765</literal>, which is also the default port on which LIRC will listen.  
  </para>
  </listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>LircSync</command> =
    <arg choice="plain"><replaceable>DURATION</replaceable></arg>
  </term>
  <listitem>
  <para>
    This value determines the length in jiffies (1/16384 seconds) of the synthesized sync pulse added 
    to the beginning of the UDP packet sent to LIRC. Values up to 255 are permitted. Setting a length 
    of zero will suppress the synthesized pulse (I can't make it work without it, though). The default is 
    <literal>64</literal> jiffies (3.9ms).  
  </para>
  </listitem>
</varlistentry>

<varlistentry>
  <term>
    <command>LircLength</command> =
    <arg choice="plain"><replaceable>DURATION</replaceable></arg>
  </term>
  <listitem>
  <para>
    This value determines the length in jiffies (1/16384 seconds) of the entire LIRC code for a single remote 
    command. It depends on the notion that all commands are of the same duration, and are padded with a trailing 
    gap (space) to make up the time. No such gap is emitted by the picolcd hardware. Values up to MAXINT are permitted.
    Setting a length of zero will suppress the synthesized gap. The default is 2048 jiffies (125ms).
  </para>
  </listitem>
</varlistentry>
</variablelist>

</sect3>
</sect2>


<sect2 id="picolcd-status">
<title>picolcd driver status</title>

<para>
	The hardware also reports key-up events.  Normally this would be of no issue (they are 
	usually a 0 or 'no key') except that when keys are used in combonation, the key-up 
	event may actually come back as multiple events depending on how the user released the 
	keys.  If the key-up event for a multiple key press comes back as two events, the first 
	up event will actually look like a new key press.  The algorithm in get_key tries to 
	deal with this in a sane way and toss out all key-up events for now.  The hardware is 
	touchy and both combo key-down and key-up actions may be reported as mutiple events if 
	the user is more than a tenth of a second (maybe less?) off in motions.
</para>

<sect3 id="picolcd-ir-status">
<title>Infrared sensor status</title>

<para>
	LIRC expects sensor data that starts with a longish 'sync' space, denoting the start of 
	a command; followed by the code data, a sequence of mark/space pairs; sometimes followed by 
	a 'gap', which should be a space long enough to make the entire command up to a preset 
	duration in milliseconds. The 'sync' and the 'gap' are absent from the data 
	emitted by the picolcd hardware. I found that LIRC configuration files for remotes similar to the 
	ones I tested all used such a fixed-duration encoding, and as that was the only way I could get it 
	working, this driver by default adds the gap as well as the sync. However I have 
	<emphasis>still</emphasis> had trouble getting <code>irrecord</code> to work; you need at least 
	to feed it a template configuration containing sync and gap data.  
</para>

<para>
	This code could therefore use more testing, more research, and more work.
</para>  

</sect3>
</sect2>


<sect2 id="picolcd-copy">
<title>Copyright</title>

<para>
	The lcdproc picolcd driver originally was written by Gatewood Green (woody@nitrosecurity.com) 
	or (woody@linif.org) and paid for by NitroSecurity, Inc (nitrosecurity.com),
	but has been extended with code from various contributors since then.
</para>

</sect2>

</sect1>
