AcceptPeekedData	CFontz633io.c	/^void AcceptPeekedData(ReceiveBuffer *rb)$/
ac_status	batt.c	/^ac_status(int status)$/
add_key	configfile.c	/^key * add_key( section * s, char * keyname, char */
AddKeyToKeyRing	ula200.c	/^int AddKeyToKeyRing(KeyRing *kr, unsigned char key/
add_section	configfile.c	/^section * add_section( char * sectionname )$/
adv_bignum_num_2_0	adv_bignum.c	/^static void adv_bignum_num_2_0 (Driver *drvthis, i/
adv_bignum_num_2_1	adv_bignum.c	/^static void adv_bignum_num_2_1 (Driver *drvthis, i/
adv_bignum_num_2_28	adv_bignum.c	/^static void adv_bignum_num_2_28 (Driver *drvthis, /
adv_bignum_num_2_2	adv_bignum.c	/^static void adv_bignum_num_2_2 (Driver *drvthis, i/
adv_bignum_num_2_5	adv_bignum.c	/^static void adv_bignum_num_2_5 (Driver *drvthis, i/
adv_bignum_num_4_0	adv_bignum.c	/^static void adv_bignum_num_4_0 (Driver *drvthis, i/
adv_bignum_num_4_3	adv_bignum.c	/^static void adv_bignum_num_4_3 (Driver *drvthis, i/
adv_bignum_write_num	adv_bignum.c	/^static void adv_bignum_write_num (Driver *drvthis,/
argv2string	menu_commands.c	/^static char *argv2string(int argc, char **argv)$/
asnprintf	snprintf.c	/^int asnprintf (char **ptr, size_t str_m, const cha/
asprintf	snprintf.c	/^int asprintf(char **ptr, const char *fmt, \/*args*\//
Backlight_Brightness	CwLnx.c	/^void Backlight_Brightness(int fd, int brightness)$/
backlight_func	client_commands.c	/^backlight_func (Client * c, int argc, char **argv)/
battery_screen	batt.c	/^battery_screen (int rep, int display, int *flags_p/
battery_status	batt.c	/^battery_status(int status)$/
bayrad_backlight	bayrad.c	/^bayrad_backlight(Driver * drvthis, int on)$/
bayrad_cellheight	bayrad.c	/^bayrad_cellheight(Driver * drvthis)$/
bayrad_cellwidth	bayrad.c	/^bayrad_cellwidth(Driver * drvthis)$/
bayrad_chr	bayrad.c	/^bayrad_chr(Driver * drvthis, int x, int y, char c)/
bayrad_clear	bayrad.c	/^bayrad_clear(Driver * drvthis)$/
bayrad_close	bayrad.c	/^bayrad_close(Driver * drvthis)$/
bayrad_flush	bayrad.c	/^bayrad_flush(Driver * drvthis)$/
bayrad_get_key	bayrad.c	/^bayrad_get_key(Driver * drvthis)$/
bayrad_hbar	bayrad.c	/^bayrad_hbar(Driver * drvthis, int x, int y, int le/
bayrad_height	bayrad.c	/^bayrad_height(Driver * drvthis)$/
bayrad_icon	bayrad.c	/^bayrad_icon(Driver * drvthis, int x, int y, int ic/
bayrad_init	bayrad.c	/^bayrad_init(Driver *drvthis)$/
bayrad_init_hbar	bayrad.c	/^bayrad_init_hbar(Driver * drvthis)$/
bayrad_init_num	bayrad.c	/^bayrad_init_num(Driver * drvthis)$/
bayrad_init_vbar	bayrad.c	/^bayrad_init_vbar(Driver * drvthis)$/
bayrad_num	bayrad.c	/^bayrad_num(Driver * drvthis, int x, int num)$/
bayrad_set_char	bayrad.c	/^bayrad_set_char(Driver * drvthis, int n, char *dat/
bayrad_string	bayrad.c	/^bayrad_string(Driver * drvthis, int x, int y, char/
bayrad_vbar	bayrad.c	/^bayrad_vbar(Driver * drvthis, int x, int y, int le/
bayrad_width	bayrad.c	/^bayrad_width(Driver * drvthis)$/
big_clock_screen	chrono.c	/^big_clock_screen (int rep, int display, int *flags/
buffile_close	fileio.c	/^int buffile_close ( buffile * file ) {$/
buffile_open	fileio.c	/^buffile *buffile_open( const char *path, const cha/
buffile_read	fileio.c	/^char * buffile_read ( buffile * file, size_t n ) {/
bwct_usb_HD44780_backlight	hd44780-bwct-usb.c	/^bwct_usb_HD44780_backlight(PrivateData *p, unsigne/
bwct_usb_HD44780_scankeypad	hd44780-bwct-usb.c	/^bwct_usb_HD44780_scankeypad(PrivateData *p)$/
bwct_usb_HD44780_senddata	hd44780-bwct-usb.c	/^bwct_usb_HD44780_senddata(PrivateData *p, unsigned/
BytesAvail	CFontz633io.c	/^int BytesAvail(ReceiveBuffer *rb)$/
catch_reload_signal	main.c	/^catch_reload_signal(int val)$/
CFontz633_backlight	CFontz633.c	/^CFontz633_backlight (Driver *drvthis, int on)$/
CFontz633_cellheight	CFontz633.c	/^CFontz633_cellheight (Driver *drvthis)$/
CFontz633_cellwidth	CFontz633.c	/^CFontz633_cellwidth (Driver *drvthis)$/
CFontz633_chr	CFontz633.c	/^CFontz633_chr (Driver *drvthis, int x, int y, char/
CFontz633_clear	CFontz633.c	/^CFontz633_clear (Driver *drvthis)$/
CFontz633_close	CFontz633.c	/^CFontz633_close (Driver *drvthis)$/
CFontz633_flush	CFontz633.c	/^CFontz633_flush (Driver *drvthis)$/
CFontz633_get_brightness	CFontz633.c	/^CFontz633_get_brightness(Driver *drvthis, int stat/
CFontz633_get_contrast	CFontz633.c	/^CFontz633_get_contrast (Driver *drvthis)$/
CFontz633_get_key	CFontz633.c	/^CFontz633_get_key (Driver *drvthis)$/
CFontz633_hardware_clear	CFontz633.c	/^CFontz633_hardware_clear (Driver *drvthis)$/
CFontz633_hbar	CFontz633.c	/^CFontz633_hbar (Driver *drvthis, int x, int y, int/
CFontz633_height	CFontz633.c	/^CFontz633_height (Driver *drvthis)$/
CFontz633_hidecursor	CFontz633.c	/^CFontz633_hidecursor (Driver *drvthis)$/
CFontz633_icon	CFontz633.c	/^CFontz633_icon (Driver *drvthis, int x, int y, int/
CFontz633_init	CFontz633.c	/^CFontz633_init (Driver *drvthis)$/
CFontz633_init_hbar	CFontz633.c	/^CFontz633_init_hbar (Driver *drvthis)$/
CFontz633_init_vbar	CFontz633.c	/^CFontz633_init_vbar (Driver *drvthis)$/
CFontz633_no_fan_report	CFontz633.c	/^CFontz633_no_fan_report (Driver *drvthis)$/
CFontz633_no_live_report	CFontz633.c	/^CFontz633_no_live_report (Driver *drvthis)$/
CFontz633_no_temp_report	CFontz633.c	/^CFontz633_no_temp_report (Driver *drvthis)$/
CFontz633_num	CFontz633.c	/^CFontz633_num (Driver *drvthis, int x, int num)$/
CFontz633_reboot	CFontz633.c	/^CFontz633_reboot (Driver *drvthis)$/
CFontz633_set_brightness	CFontz633.c	/^CFontz633_set_brightness(Driver *drvthis, int stat/
CFontz633_set_char	CFontz633.c	/^CFontz633_set_char (Driver *drvthis, int n, char */
CFontz633_set_contrast	CFontz633.c	/^CFontz633_set_contrast (Driver *drvthis, int promi/
CFontz633_string	CFontz633.c	/^CFontz633_string (Driver *drvthis, int x, int y, c/
CFontz633_vbar	CFontz633.c	/^CFontz633_vbar (Driver *drvthis, int x, int y, int/
CFontz633_width	CFontz633.c	/^CFontz633_width (Driver *drvthis)$/
CFontz_autoscroll	CFontz.c	/^CFontz_autoscroll (Driver *drvthis, int on)$/
CFontz_backlight	CFontz.c	/^CFontz_backlight (Driver *drvthis, int on)$/
CFontz_chr	CFontz.c	/^CFontz_chr (Driver *drvthis, int x, int y, unsigne/
CFontz_clear	CFontz.c	/^CFontz_clear (Driver *drvthis)$/
CFontz_close	CFontz.c	/^CFontz_close (Driver *drvthis)$/
CFontz_flush	CFontz.c	/^CFontz_flush (Driver *drvthis)$/
CFontz_get_contrast	CFontz.c	/^CFontz_get_contrast (Driver *drvthis)$/
CFontz_hbar	CFontz.c	/^CFontz_hbar (Driver *drvthis, int x, int y, int le/
CFontz_height	CFontz.c	/^CFontz_height (Driver *drvthis)$/
CFontz_hidecursor	CFontz.c	/^CFontz_hidecursor (Driver *drvthis)$/
CFontz_icon	CFontz.c	/^CFontz_icon (Driver *drvthis, int x, int y, int ic/
CFontz_init	CFontz.c	/^CFontz_init (Driver *drvthis)$/
CFontz_init_hbar	CFontz.c	/^CFontz_init_hbar (Driver *drvthis)$/
CFontz_init_vbar	CFontz.c	/^CFontz_init_vbar (Driver *drvthis)$/
CFontz_linewrap	CFontz.c	/^CFontz_linewrap (Driver *drvthis, int on)$/
CFontzPacket_backlight	CFontzPacket.c	/^CFontzPacket_backlight (Driver *drvthis, int on)$/
CFontzPacket_cellheight	CFontzPacket.c	/^CFontzPacket_cellheight (Driver *drvthis)$/
CFontzPacket_cellwidth	CFontzPacket.c	/^CFontzPacket_cellwidth (Driver *drvthis)$/
CFontzPacket_chr	CFontzPacket.c	/^CFontzPacket_chr (Driver *drvthis, int x, int y, c/
CFontzPacket_clear	CFontzPacket.c	/^CFontzPacket_clear (Driver *drvthis)$/
CFontzPacket_close	CFontzPacket.c	/^CFontzPacket_close (Driver *drvthis)$/
CFontzPacket_flush	CFontzPacket.c	/^CFontzPacket_flush (Driver *drvthis)$/
CFontzPacket_get_brightness	CFontzPacket.c	/^CFontzPacket_get_brightness(Driver *drvthis, int s/
CFontzPacket_get_contrast	CFontzPacket.c	/^CFontzPacket_get_contrast (Driver *drvthis)$/
CFontzPacket_get_info	CFontzPacket.c	/^CFontzPacket_get_info(Driver *drvthis)$/
CFontzPacket_get_key	CFontzPacket.c	/^CFontzPacket_get_key (Driver *drvthis)$/
CFontzPacket_hardware_clear	CFontzPacket.c	/^CFontzPacket_hardware_clear (Driver *drvthis)$/
CFontzPacket_hbar	CFontzPacket.c	/^CFontzPacket_hbar (Driver *drvthis, int x, int y, /
CFontzPacket_height	CFontzPacket.c	/^CFontzPacket_height (Driver *drvthis)$/
CFontzPacket_hidecursor	CFontzPacket.c	/^CFontzPacket_hidecursor (Driver *drvthis)$/
CFontzPacket_icon	CFontzPacket.c	/^CFontzPacket_icon (Driver *drvthis, int x, int y, /
CFontzPacket_init	CFontzPacket.c	/^CFontzPacket_init (Driver *drvthis)$/
CFontzPacket_init_hbar	CFontzPacket.c	/^CFontzPacket_init_hbar (Driver *drvthis)$/
CFontzPacket_init_num	CFontzPacket.c	/^CFontzPacket_init_num(Driver *drvthis)$/
CFontzPacket_init_vbar	CFontzPacket.c	/^CFontzPacket_init_vbar (Driver *drvthis)$/
CFontzPacket_no_fan_report	CFontzPacket.c	/^CFontzPacket_no_fan_report (Driver *drvthis)$/
CFontzPacket_no_live_report	CFontzPacket.c	/^CFontzPacket_no_live_report (Driver *drvthis)$/
CFontzPacket_no_temp_report	CFontzPacket.c	/^CFontzPacket_no_temp_report (Driver *drvthis)$/
CFontzPacket_num	CFontzPacket.c	/^CFontzPacket_num(Driver *drvthis, int x, int num)$/
CFontzPacket_output	CFontzPacket.c	/^CFontzPacket_output(Driver *drvthis, int state)$/
CFontzPacket_raw_chr	CFontzPacket.c	/^CFontzPacket_raw_chr (Driver *drvthis, int x, int /
CFontzPacket_reboot	CFontzPacket.c	/^CFontzPacket_reboot (Driver *drvthis)$/
CFontzPacket_set_brightness	CFontzPacket.c	/^CFontzPacket_set_brightness(Driver *drvthis, int s/
CFontzPacket_set_char	CFontzPacket.c	/^CFontzPacket_set_char (Driver *drvthis, int n, cha/
CFontzPacket_set_contrast	CFontzPacket.c	/^CFontzPacket_set_contrast (Driver *drvthis, int pr/
CFontzPacket_string	CFontzPacket.c	/^CFontzPacket_string (Driver *drvthis, int x, int y/
CFontzPacket_vbar	CFontzPacket.c	/^CFontzPacket_vbar (Driver *drvthis, int x, int y, /
CFontzPacket_width	CFontzPacket.c	/^CFontzPacket_width (Driver *drvthis)$/
CFontz_reboot	CFontz.c	/^CFontz_reboot (Driver *drvthis)$/
CFontz_set_char	CFontz.c	/^CFontz_set_char (Driver *drvthis, int n, char *dat/
CFontz_set_contrast	CFontz.c	/^CFontz_set_contrast (Driver *drvthis, int promille/
CFontz_string	CFontz.c	/^CFontz_string (Driver *drvthis, int x, int y, unsi/
CFontz_vbar	CFontz.c	/^CFontz_vbar (Driver *drvthis, int x, int y, int le/
CFontz_width	CFontz.c	/^CFontz_width (Driver *drvthis)$/
CHAIN_END	lcdexec.c	/^#define CHAIN_END(e) { if( e<0 ) { report( RPT_CRI/
CHAIN_END	main.c	/^#define CHAIN_END(e,msg) { if( e<0 ) { report( RPT/
CHAIN	lcdexec.c	/^#define CHAIN(e,f) { if( e>=0 ) { e=(f); }}$/
CHAIN	main.c	/^#define CHAIN(e,f) { if( e>=0 ) { e=(f); }}$/
check_for_packet	CFontz633io.c	/^check_for_packet(int fd, COMMAND_PACKET *in, unsig/
child_ok_func	main.c	/^child_ok_func(int signal)$/
Clear_Screen	CwLnx.c	/^void Clear_Screen(int fd)$/
clear_settings	main.c	/^clear_settings(void)$/
client_add_key_func	client_commands.c	/^client_add_key_func (Client * c, int argc, char **/
client_add_message	client.c	/^client_add_message (Client * c, char *message)$/
client_add_screen	client.c	/^client_add_screen (Client * c, Screen * s)$/
client_create	client.c	/^Client * client_create (int sock)$/
client_del_key_func	client_commands.c	/^client_del_key_func (Client * c, int argc, char **/
client_destroy	client.c	/^client_destroy (Client * c)$/
client_find_screen	client.c	/^client_find_screen (Client * c, char *id)$/
client_get_message	client.c	/^client_get_message (Client * c)$/
client_remove_screen	client.c	/^client_remove_screen (Client * c, Screen * s)$/
clients_add_client	clients.c	/^clients_add_client (Client *c)$/
clients_client_count	clients.c	/^clients_client_count ()$/
client_screen_count	client.c	/^int client_screen_count (Client * c)$/
client_set_func	client_commands.c	/^client_set_func (Client * c, int argc, char **argv/
clients_find_client_by_sock	clients.c	/^clients_find_client_by_sock (int sock)$/
clients_getfirst	clients.c	/^clients_getfirst ()$/
clients_getnext	clients.c	/^clients_getnext ()$/
clients_init	clients.c	/^clients_init ()$/
clients_remove_client	clients.c	/^clients_remove_client (Client *c)$/
clients_shutdown	clients.c	/^clients_shutdown ()$/
clock_screen	chrono.c	/^clock_screen (int rep, int display, int *flags_ptr/
common_init	hd44780.c	/^common_init (PrivateData *p, unsigned char if_bit)/
compare_priority	screenlist.c	/^compare_priority (void *one, void *two)$/
config_clear	configfile.c	/^void config_clear()$/
config_get_bool	configfile.c	/^short config_get_bool( char *sectionname, char *ke/
config_get_float	configfile.c	/^double config_get_float( char *sectionname, char */
config_get_int	configfile.c	/^long int config_get_int( char *sectionname, char */
config_get_string	configfile.c	/^char *config_get_string( char * sectionname, char /
config_has_key	configfile.c	/^int config_has_key( char *sectionname, char *keyna/
config_has_section	configfile.c	/^int config_has_section( char *sectionname )$/
config_read_file	configfile.c	/^int config_read_file( char *filename )$/
config_read_string	configfile.c	/^int config_read_string( char *sectionname, char *s/
connect_and_setup	lcdexec.c	/^int connect_and_setup ()$/
connect_to_ldap	configfile.c	/^connect_to_ldap (void)$/
cpu_graph_screen	cpu.c	/^cpu_graph_screen(int rep, int display, int *flags_/
cpu_screen	cpu.c	/^cpu_screen(int rep, int display, int *flags_ptr)$/
cpu_smp_screen	cpu_smp.c	/^cpu_smp_screen (int rep, int display, int *flags_p/
credit_screen	mode.c	/^credit_screen(int rep, int display, int *flags_ptr/
curses_backlight	curses_drv.c	/^curses_backlight (Driver *drvthis, int on)$/
curses_chr	curses_drv.c	/^curses_chr (Driver *drvthis, int x, int y, char c)/
curses_clear	curses_drv.c	/^curses_clear (Driver *drvthis)$/
curses_close	curses_drv.c	/^curses_close (Driver *drvthis)$/
curses_flush	curses_drv.c	/^curses_flush (Driver *drvthis)$/
curses_get_key	curses_drv.c	/^curses_get_key (Driver *drvthis)$/
curses_hbar	curses_drv.c	/^curses_hbar (Driver *drvthis, int x, int y, int le/
curses_height	curses_drv.c	/^curses_height (Driver *drvthis)$/
curses_icon	curses_drv.c	/^curses_icon (Driver *drvthis, int x, int y, int ic/
curses_init	curses_drv.c	/^curses_init (Driver *drvthis)$/
curses_restore_screen	curses_drv.c	/^curses_restore_screen (Driver *drvthis)$/
curses_string	curses_drv.c	/^curses_string (Driver *drvthis, int x, int y, char/
curses_vbar	curses_drv.c	/^curses_vbar (Driver *drvthis, int x, int y, int le/
curses_wborder	curses_drv.c	/^curses_wborder (Driver *drvthis)$/
curses_width	curses_drv.c	/^curses_width (Driver *drvthis)$/
CwLnx_autoscroll	CwLnx.c	/^CwLnx_autoscroll(int fd, int on)$/
CwLnx_backlight	CwLnx.c	/^CwLnx_backlight(Driver * drvthis, int on)$/
CwLnx_chr	CwLnx.c	/^CwLnx_chr(Driver *drvthis, int x, int y, char c)$/
CwLnx_clear	CwLnx.c	/^CwLnx_clear(Driver *drvthis)$/
CwLnx_close	CwLnx.c	/^CwLnx_close(Driver *drvthis)$/
CwLnx_draw_frame	CwLnx.c	/^CwLnx_draw_frame(Driver *drvthis, char *dat)$/
CwLnx_flush	CwLnx.c	/^CwLnx_flush(Driver *drvthis)$/
CwLnx_flushtime_heartbeat	CwLnx.c	/^CwLnx_flushtime_heartbeat(Driver * drvthis)$/
CwLnx_get_brightness	CwLnx.c	/^CwLnx_get_brightness(Driver * drvthis, int state)$/
CwLnx_get_key	CwLnx.c	/^CwLnx_get_key(Driver * drvthis)$/
CwLnx_hbar	CwLnx.c	/^CwLnx_hbar(Driver * drvthis, int x, int y, int len/
CwLnx_heartbeat	CwLnx.c	/^CwLnx_heartbeat(Driver * drvthis, int type)$/
CwLnx_height	CwLnx.c	/^CwLnx_height(Driver *drvthis)$/
CwLnx_hidecursor	CwLnx.c	/^CwLnx_hidecursor(int fd)$/
CwLnx_icon	CwLnx.c	/^CwLnx_icon(Driver * drvthis, int x, int y, int ico/
CwLnx_init	CwLnx.c	/^int CwLnx_init(Driver * drvthis)$/
CwLnx_init_hbar	CwLnx.c	/^CwLnx_init_hbar(Driver * drvthis)$/
CwLnx_init_vbar	CwLnx.c	/^CwLnx_init_vbar(Driver * drvthis)$/
CwLnx_linewrap	CwLnx.c	/^CwLnx_linewrap(int fd, int on)$/
CwLnx_parse_keypad_setting	CwLnx.c	/^static char CwLnx_parse_keypad_setting(Driver *drv/
CwLnx_set_brightness	CwLnx.c	/^CwLnx_set_brightness(Driver * drvthis, int state, /
CwLnx_set_char	CwLnx.c	/^CwLnx_set_char(Driver * drvthis, int n, char *dat)/
CwLnx_string	CwLnx.c	/^CwLnx_string(Driver * drvthis, int x, int y, char /
CwLnx_vbar	CwLnx.c	/^CwLnx_vbar(Driver * drvthis, int x, int y, int len/
CwLnx_width	CwLnx.c	/^CwLnx_width(Driver *drvthis)$/
daemonize	main.c	/^daemonize(void)$/
data_ready	pylcd.c	/^int data_ready(PrivateData *p)$/
debug	debug.h	/^static inline void debug(const char *format, ...\/*/
Disable_Backlight	CwLnx.c	/^void Disable_Backlight(int fd)$/
Disable_Cursor	CwLnx.c	/^void Disable_Cursor(int fd)$/
Disable_Pixel	CwLnx.c	/^void Disable_Pixel(int fd, int x, int y)$/
Disable_Scroll	CwLnx.c	/^void Disable_Scroll(int fd)$/
Disable_Wrap	CwLnx.c	/^void Disable_Wrap(int fd)$/
disk_screen	disk.c	/^disk_screen (int rep, int display, int *flags_ptr)/
do_mainloop	main.c	/^do_mainloop(void)$/
dont_report	report.h	/^static inline void dont_report( const int level, c/
do_reload	main.c	/^do_reload(void)$/
drawchar2fb	sed1520.c	/^drawchar2fb (unsigned char *framebuf, int x, int y/
driver_alt_cursor	driver.c	/^void driver_alt_cursor( Driver * drv, int x, int y/
driver_alt_hbar	driver.c	/^driver_alt_hbar( Driver * drv, int x, int y, int l/
driver_alt_heartbeat	driver.c	/^driver_alt_heartbeat( Driver * drv, int state )$/
driver_alt_icon	driver.c	/^driver_alt_icon( Driver * drv, int x, int y, int i/
driver_alt_num	driver.c	/^driver_alt_num( Driver * drv, int x, int num )$/
driver_alt_vbar	driver.c	/^driver_alt_vbar( Driver * drv, int x, int y, int l/
driver_bind_module	driver.c	/^driver_bind_module( Driver * driver )$/
driver_does_input	driver.c	/^driver_does_input( Driver * driver )$/
driver_does_output	driver.c	/^driver_does_output( Driver * driver )$/
driver_load	driver.c	/^driver_load( char * name, char * filename )$/
drivers_backlight	drivers.c	/^drivers_backlight( int brightness )$/
drivers_chr	drivers.c	/^drivers_chr( int x, int y, char c )$/
drivers_clear	drivers.c	/^drivers_clear()$/
drivers_cursor	drivers.c	/^drivers_cursor( int x, int y, int state )$/
drivers_flush	drivers.c	/^drivers_flush()$/
drivers_getfirst	drivers.h	/^static inline Driver * drivers_getfirst ()$/
drivers_get_info	drivers.c	/^drivers_get_info()$/
drivers_get_key	drivers.c	/^drivers_get_key()$/
drivers_getnext	drivers.h	/^static inline Driver * drivers_getnext ()$/
drivers_hbar	drivers.c	/^drivers_hbar( int x, int y, int len, int promille,/
drivers_heartbeat	drivers.c	/^drivers_heartbeat( int state )$/
drivers_icon	drivers.c	/^drivers_icon( int x, int y, int icon )$/
drivers_load_driver	drivers.c	/^drivers_load_driver( char * name )$/
drivers_num	drivers.c	/^drivers_num( int x, int num )$/
drivers_output	drivers.c	/^drivers_output( int state )$/
drivers_string	drivers.c	/^drivers_string( int x, int y, char * string )$/
driver_stay_in_foreground	driver.c	/^driver_stay_in_foreground( Driver * driver )$/
driver_store_private_ptr	driver.c	/^driver_store_private_ptr(Driver * driver, void * p/
drivers_unload_all	drivers.c	/^drivers_unload_all()$/
driver_supports_multiple	driver.c	/^driver_supports_multiple( Driver * driver )$/
drivers_vbar	drivers.c	/^drivers_vbar( int x, int y, int len, int promille,/
driver_unbind_module	driver.c	/^driver_unbind_module( Driver * driver )$/
driver_unload	driver.c	/^driver_unload( Driver * driver )$/
drop_privs	main.c	/^drop_privs(char *user)$/
EmptyKeyRing	ula200.c	/^void EmptyKeyRing(KeyRing *kr)$/
EmptyReceiveBuffer	CFontz633io.c	/^void EmptyReceiveBuffer(ReceiveBuffer *rb)$/
Enable_Backlight	CwLnx.c	/^void Enable_Backlight(int fd)$/
Enable_Pixel	CwLnx.c	/^void Enable_Pixel(int fd, int x, int y)$/
Enable_Scroll	CwLnx.c	/^void Enable_Scroll(int fd)$/
Enable_Wrap	CwLnx.c	/^void Enable_Wrap(int fd)$/
exec_command	lcdexec.c	/^int exec_command( char * command )$/
exit_program	main.c	/^exit_program(int val)$/
ExpandGroovyFont	svgalib_drv.c	/^ExpandGroovyFont (int w, int ht, unsigned char col/
fast_memcpy	snprintf.c	/^#define fast_memcpy(d,s,n) \\$/
fast_memset	snprintf.c	/^#define fast_memset(d,c,n) \\$/
find_key	configfile.c	/^key * find_key( section * s, char * keyname, int s/
find_section	configfile.c	/^section * find_section( char * sectionname )$/
flush_messages	report.c	/^static void flush_messages()$/
ForAllDrivers	drivers.c	/^#define ForAllDrivers(drv) for( drv = LL_GetFirst(/
get_args	str.c	/^get_args (char **argv, char *str, int max_args)$/
GetByte	CFontz633io.c	/^unsigned char GetByte(ReceiveBuffer *rb)$/
get_color	curses_drv.c	/^chtype get_color (char *colorstr) {$/
get_command_function	command_list.c	/^CommandFunc get_command_function(char *cmd)$/
get_crc	CFontz633io.c	/^get_crc(unsigned char *buf, int len, int seed)$/
get_credits_snprintf	snprintf.c	/^inline const char* get_credits_snprintf(const char/
getentry	machine_Linux.c	/^getentry (const char *tag, const char *bufptr)$/
GetKeyFromKeyRing	ula200.c	/^unsigned char GetKeyFromKeyRing(KeyRing *kr)$/
getkey	lcd_sem.c	/^getkey (register char *p)$/
get_next_char_f	configfile.c	/^char get_next_char_f(buffile * f) {$/
glcdlib_cellheight	glcdlib.c	/^glcdlib_cellheight (Driver *drvthis)$/
glcdlib_cellwidth	glcdlib.c	/^glcdlib_cellwidth (Driver *drvthis)$/
glcdlib_chr	glcdlib.c	/^glcdlib_chr (Driver *drvthis, int x, int y, char c/
glcdlib_clear	glcdlib.c	/^glcdlib_clear (Driver *drvthis)$/
glcdlib_close	glcdlib.c	/^glcdlib_close (Driver *drvthis)$/
glcdlib_flush	glcdlib.c	/^glcdlib_flush (Driver *drvthis)$/
glcdlib_get_brightness	glcdlib.c	/^glcdlib_get_brightness(Driver *drvthis, int state)/
glcdlib_get_free_chars	glcdlib.c	/^glcdlib_get_free_chars (Driver *drvthis)$/
glcdlib_get_info	glcdlib.c	/^glcdlib_get_info (Driver *drvthis)$/
glcdlib_hbar	glcdlib.c	/^glcdlib_hbar (Driver *drvthis, int x, int y, int l/
glcdlib_height	glcdlib.c	/^glcdlib_height (Driver *drvthis)$/
glcdlib_icon	glcdlib.c	/^glcdlib_icon (Driver *drvthis, int x, int y, int i/
glcdlib_init	glcdlib.c	/^MODULE_EXPORT int glcdlib_init (Driver *drvthis)$/
glcdlib_num	glcdlib.c	/^glcdlib_num (Driver *drvthis, int x, int num)$/
glcdlib_set_brightness	glcdlib.c	/^glcdlib_set_brightness(Driver *drvthis, int state,/
glcdlib_set_char	glcdlib.c	/^glcdlib_set_char (Driver *drvthis, int n, char *da/
glcdlib_string	glcdlib.c	/^glcdlib_string (Driver *drvthis, int x, int y, cha/
glcdlib_vbar	glcdlib.c	/^glcdlib_vbar (Driver *drvthis, int x, int y, int l/
glcdlib_width	glcdlib.c	/^glcdlib_width (Driver *drvthis)$/
glk_backlight	glk.c	/^glk_backlight(Driver *drvthis, int on)$/
glk_cellheight	glk.c	/^glk_cellheight (Driver *drvthis)$/
glk_cellwidth	glk.c	/^glk_cellwidth (Driver *drvthis)$/
glk_chr	glk.c	/^glk_chr(Driver *drvthis, int x, int y, char c)$/
glk_clear_forced	glk.c	/^void glk_clear_forced(Driver *drvthis)$/
glk_clear	glk.c	/^glk_clear(Driver *drvthis)$/
glk_close	glk.c	/^glk_close(Driver *drvthis)$/
glkclose	glkproto.c	/^glkclose(GLKDisplay *fd)$/
glkflow	glkproto.c	/^glkflow(GLKDisplay *fd, int full, int empty)$/
glk_flush	glk.c	/^glk_flush(Driver *drvthis)$/
glkgetc	glkproto.c	/^glkgetc(GLKDisplay *fd)$/
glk_get_contrast	glk.c	/^glk_get_contrast(Driver *drvthis)$/
glkget	glkproto.c	/^glkget(GLKDisplay *fd)$/
glk_get_key	glk.c	/^glk_get_key(Driver *drvthis)$/
glk_height	glk.c	/^glk_height (Driver *drvthis)$/
glk_init	glk.c	/^glk_init(Driver *drvthis)$/
glk_init_hbar	glk.c	/^glk_init_hbar(Driver *drvthis)$/
glk_init_num	glk.c	/^glk_init_num(Driver *drvthis)$/
glk_init_vbar	glk.c	/^glk_init_vbar(Driver *drvthis)$/
glk_num	glk.c	/^glk_num(Driver *drvthis, int x, int num)$/
glk_old_hbar	glk.c	/^glk_old_hbar(Driver *drvthis, int x, int y, int le/
glk_old_icon	glk.c	/^glk_old_icon(Driver *drvthis, int which, int dest)/
glk_old_vbar	glk.c	/^glk_old_vbar(Driver *drvthis, int x, int len)$/
glkopen	glkproto.c	/^GLKDisplay *glkopen(char *name, tcflag_t speed)$/
glk_output	glk.c	/^glk_output(Driver *drvthis, int on)$/
glkpoll	glkproto.c	/^glkpoll(GLKDisplay *fd, int timeout)$/
glkputa_confirm	glkproto.c	/^glkputa_confirm(GLKDisplay *fd, int len, unsigned /
glkputa	glkproto.c	/^glkputa(GLKDisplay *fd, int len, unsigned char *st/
glkput_confirm	glkproto.c	/^glkput_confirm(GLKDisplay *fd, int c)$/
glkput_echo	glkproto.c	/^glkput_echo(GLKDisplay *fd, int c)$/
glkput	glkproto.c	/^glkput(GLKDisplay *fd, int c)$/
glkputl	glkproto.c	/^glkputl(GLKDisplay *fd, ...)$/
glkputs	glkproto.c	/^glkputs(GLKDisplay *fd, char *str)$/
glk_set_char	glk.c	/^glk_set_char(Driver *drvthis, int n, char *dat)$/
glk_set_contrast	glk.c	/^glk_set_contrast(Driver *drvthis, int promille)$/
glk_string	glk.c	/^glk_string(Driver *drvthis, int x, int y, char str/
glktimeout	glkproto.c	/^glktimeout(GLKDisplay *fd, int timeout)$/
glkunget	glkproto.c	/^glkunget(GLKDisplay *fd, int c)$/
glk_width	glk.c	/^glk_width (Driver *drvthis)$/
goodbye_screen	serverscreens.c	/^goodbye_screen ()$/
gotoXY	hd44780-lis2.c	/^void gotoXY(int fd, int x, int y)$/
handle_close	menuscreens.c	/^static void handle_close()$/
handle_enter	menuscreens.c	/^static void handle_enter()$/
handle_input	input.c	/^handle_input ()$/
handle_none	menuscreens.c	/^static void handle_none()$/
handle_predecessor	menuscreens.c	/^static void handle_predecessor()$/
handle_quit	menuscreens.c	/^static void handle_quit()$/
handle_successor	menuscreens.c	/^static void handle_successor()$/
HD44780_backlight	hd44780.c	/^HD44780_backlight (Driver *drvthis, int on)$/
HD44780_chr	hd44780.c	/^HD44780_chr (Driver *drvthis, int x, int y, char c/
HD44780_clear	hd44780.c	/^HD44780_clear (Driver *drvthis)$/
HD44780_close	hd44780.c	/^HD44780_close(Driver *drvthis)$/
HD44780_flush	hd44780.c	/^HD44780_flush (Driver *drvthis)$/
HD44780_get_key	hd44780.c	/^HD44780_get_key(Driver *drvthis)$/
HD44780_hbar	hd44780.c	/^HD44780_hbar (Driver *drvthis, int x, int y, int l/
HD44780_height	hd44780.c	/^HD44780_height (Driver *drvthis)$/
HD44780_icon	hd44780.c	/^HD44780_icon (Driver *drvthis, int x, int y, int i/
HD44780_init_hbar	hd44780.c	/^HD44780_init_hbar (Driver *drvthis)$/
HD44780_init	hd44780.c	/^HD44780_init (Driver * drvthis)$/
HD44780_init_num	hd44780.c	/^HD44780_init_num (Driver *drvthis)$/
HD44780_init_vbar	hd44780.c	/^HD44780_init_vbar (Driver *drvthis)$/
HD44780_num	hd44780.c	/^HD44780_num (Driver *drvthis, int x, int num)$/
HD44780_output	hd44780.c	/^HD44780_output (Driver *drvthis, int on)$/
HD44780_position	hd44780.c	/^HD44780_position (Driver *drvthis, int x, int y)$/
HD44780_scankeypad	hd44780.c	/^unsigned char HD44780_scankeypad(PrivateData *p)$/
HD44780_set_char	hd44780.c	/^HD44780_set_char (Driver *drvthis, int n, char *da/
HD44780_string	hd44780.c	/^HD44780_string (Driver *drvthis, int x, int y, cha/
HD44780_vbar	hd44780.c	/^HD44780_vbar (Driver *drvthis, int x, int y, int l/
HD44780_width	hd44780.c	/^HD44780_width (Driver *drvthis)$/
hd_init_4bit	hd44780-4bit.c	/^hd_init_4bit (Driver *drvthis)$/
hd_init_bwct_usb	hd44780-bwct-usb.c	/^hd_init_bwct_usb (Driver *drvthis)$/
hd_init_ext8bit	hd44780-ext8bit.c	/^hd_init_ext8bit (Driver *drvthis)$/
hd_init_i2c	hd44780-i2c.c	/^hd_init_i2c (Driver *drvthis)$/
hd_init_lcdserializer	hd44780-lcdserializer.c	/^hd_init_lcdserializer (Driver *drvthis)$/
hd_init_lis2	hd44780-lis2.c	/^int hd_init_lis2 (Driver *drvthis)$/
hd_init_picanlcd	hd44780-picanlcd.c	/^hd_init_picanlcd (Driver *drvthis)$/
hd_init_serialLpt	hd44780-serialLpt.c	/^hd_init_serialLpt (Driver *drvthis)$/
hd_init_winamp	hd44780-winamp.c	/^hd_init_winamp (Driver *drvthis)$/
hello_func	client_commands.c	/^hello_func (Client * c, int argc, char **argv)$/
i2c_HD44780_backlight	hd44780-i2c.c	/^void i2c_HD44780_backlight (PrivateData *p, unsign/
i2c_HD44780_senddata	hd44780-i2c.c	/^i2c_HD44780_senddata (PrivateData *p, unsigned cha/
i2c_out	hd44780-i2c.c	/^i2c_out (PrivateData *p, unsigned char val)$/
icp_a106_chr	icp_a106.c	/^icp_a106_chr (Driver *drvthis, int x, int y, char /
icp_a106_clear	icp_a106.c	/^icp_a106_clear (Driver *drvthis)$/
icp_a106_close	icp_a106.c	/^icp_a106_close (Driver *drvthis)$/
icp_a106_flush	icp_a106.c	/^icp_a106_flush (Driver *drvthis)$/
icp_a106_hbar	icp_a106.c	/^icp_a106_hbar(Driver *drvthis, int x, int y, int l/
icp_a106_height	icp_a106.c	/^icp_a106_height (Driver *drvthis)$/
icp_a106_icon	icp_a106.c	/^icp_a106_icon (Driver *drvthis, int x, int y, int /
icp_a106_init	icp_a106.c	/^icp_a106_init (Driver *drvthis)$/
icp_a106_num	icp_a106.c	/^icp_a106_num (Driver *drvthis, int x, int num)$/
icp_a106_string	icp_a106.c	/^icp_a106_string (Driver *drvthis, int x, int y, ch/
icp_a106_vbar	icp_a106.c	/^icp_a106_vbar (Driver *drvthis, int x, int y, int /
icp_a106_width	icp_a106.c	/^icp_a106_width (Driver *drvthis)$/
imon_cellheight	imon.c	/^MODULE_EXPORT int  imon_cellheight (Driver *drvthi/
imon_cellwidth	imon.c	/^MODULE_EXPORT int imon_cellwidth (Driver *drvthis)/
imon_chr	imon.c	/^MODULE_EXPORT void imon_chr (Driver *drvthis, int /
imon_clear	imon.c	/^MODULE_EXPORT void imon_clear (Driver *drvthis)$/
imon_close	imon.c	/^MODULE_EXPORT void imon_close (Driver *drvthis)$/
imon_flush	imon.c	/^MODULE_EXPORT void imon_flush (Driver *drvthis)$/
imon_get_info	imon.c	/^MODULE_EXPORT const char * imon_get_info (Driver */
imon_hbar	imon.c	/^MODULE_EXPORT void imon_hbar (Driver *drvthis, int/
imon_height	imon.c	/^MODULE_EXPORT int  imon_height (Driver *drvthis)$/
imon_init	imon.c	/^MODULE_EXPORT int imon_init (Driver *drvthis)$/
imon_string	imon.c	/^MODULE_EXPORT void imon_string (Driver *drvthis, i/
imon_vbar	imon.c	/^MODULE_EXPORT void imon_vbar (Driver *drvthis, int/
imon_width	imon.c	/^MODULE_EXPORT int imon_width (Driver *drvthis)$/
info_func	client_commands.c	/^info_func (Client * c, int argc, char **argv)$/
init_drivers	main.c	/^init_drivers(void)$/
Init_Port	CwLnx.c	/^void Init_Port(fd)$/
init_screens	main.c	/^init_screens(void)$/
initTTY	pylcd.c	/^int initTTY(Driver *drvthis, int FD)$/
input_find_key	input.c	/^KeyReservation * input_find_key (const char * key,/
input_init	input.c	/^int input_init()$/
input_internal_key	input.c	/^input_internal_key (const char * key)$/
input_release_client_keys	input.c	/^void input_release_client_keys (Client * client)$/
input_release_key	input.c	/^void input_release_key (const char * key, Client */
input_send_to_client	input.c	/^void input_send_to_client (Client * c, const char /
input_shutdown	input.c	/^int input_shutdown()$/
install_signal_handlers	main.c	/^install_signal_handlers(int allow_reload)$/
interpret_boolean_arg	main.c	/^interpret_boolean_arg(char *s)$/
IOWarrior_backlight	IOWarrior.c	/^IOWarrior_backlight(Driver *drvthis, int on)$/
IOWarrior_chr	IOWarrior.c	/^IOWarrior_chr(Driver *drvthis, int x, int y, char /
IOWarrior_clear	IOWarrior.c	/^IOWarrior_clear(Driver *drvthis)$/
IOWarrior_close	IOWarrior.c	/^IOWarrior_close(Driver *drvthis)$/
IOWarrior_flush	IOWarrior.c	/^IOWarrior_flush(Driver *drvthis)$/
IOWarrior_get_info	IOWarrior.c	/^IOWarrior_get_info (Driver *drvthis)$/
IOWarrior_hbar	IOWarrior.c	/^IOWarrior_hbar(Driver *drvthis, int x, int y, int /
IOWarrior_height	IOWarrior.c	/^IOWarrior_height(Driver *drvthis)$/
IOWarrior_icon	IOWarrior.c	/^IOWarrior_icon(Driver *drvthis, int x, int y, int /
IOWarrior_init_hbar	IOWarrior.c	/^IOWarrior_init_hbar(Driver *drvthis)$/
IOWarrior_init	IOWarrior.c	/^IOWarrior_init(Driver *drvthis)$/
IOWarrior_init_num	IOWarrior.c	/^IOWarrior_init_num(Driver *drvthis)$/
IOWarrior_init_vbar	IOWarrior.c	/^IOWarrior_init_vbar(Driver *drvthis)$/
IOWarrior_num	IOWarrior.c	/^IOWarrior_num(Driver *drvthis, int x, int num)$/
IOWarrior_output	IOWarrior.c	/^IOWarrior_output(Driver *drvthis, int on)$/
IOWarrior_set_char	IOWarrior.c	/^IOWarrior_set_char(Driver *drvthis, int n, char *d/
IOWarrior_string	IOWarrior.c	/^IOWarrior_string(Driver *drvthis, int x, int y, ch/
IOWarrior_vbar	IOWarrior.c	/^IOWarrior_vbar(Driver *drvthis, int x, int y, int /
IOWarrior_width	IOWarrior.c	/^IOWarrior_width(Driver *drvthis)$/
iowlcd_disable	IOWarrior.c	/^int iowlcd_disable(usb_dev_handle *udh)$/
iowlcd_display_clear	IOWarrior.c	/^int iowlcd_display_clear(usb_dev_handle *udh)$/
iowlcd_display_on_off	IOWarrior.c	/^int iowlcd_display_on_off(usb_dev_handle *udh,int /
iowlcd_enable	IOWarrior.c	/^int iowlcd_enable(usb_dev_handle *udh)$/
iowlcd_load_chars	IOWarrior.c	/^int iowlcd_load_chars(usb_dev_handle *udh,int offs/
iowlcd_set_cgram_addr	IOWarrior.c	/^int iowlcd_set_cgram_addr(usb_dev_handle *udh,int /
iowlcd_set_ddram_addr	IOWarrior.c	/^int iowlcd_set_ddram_addr(usb_dev_handle *udh,int /
iowlcd_set_function	IOWarrior.c	/^int iowlcd_set_function(usb_dev_handle *udh,int ei/
iowlcd_set_pos	IOWarrior.c	/^int iowlcd_set_pos(usb_dev_handle *udh,int x,int y/
iowlcd_set_text	IOWarrior.c	/^int iowlcd_set_text(usb_dev_handle *udh,int x,int /
iow_lcd_wcmd	IOWarrior.c	/^static int iow_lcd_wcmd(usb_dev_handle *udh, unsig/
iowlcd_write_data	IOWarrior.c	/^int iowlcd_write_data(usb_dev_handle *udh,int len,/
iowled_on_off	IOWarrior.c	/^int iowled_on_off(usb_dev_handle *udh,int type, un/
iow_led_wcmd	IOWarrior.c	/^static int iow_led_wcmd(usb_dev_handle *udh,int le/
irmanin_close	irmanin.c	/^irmanin_close (Driver *drvthis)$/
irmanin_get_key	irmanin.c	/^irmanin_get_key (Driver *drvthis)$/
irmanin_init	irmanin.c	/^irmanin_init (Driver *drvthis)$/
is_closing_quote	parse.c	/^static inline int is_closing_quote(char x, char q)/
isdigit	snprintf.c	/^#define isdigit(c) ((c) >= '0' && (c) <= '9')$/
is_final	parse.c	/^static inline int is_final(char x) {$/
is_menu_key	menuscreens.c	/^bool is_menu_key (const char * key)$/
is_opening_quote	parse.c	/^static inline int is_opening_quote(char x, char q)/
is_whitespace	parse.c	/^static inline int is_whitespace(char x)	{$/
joy_close	joy.c	/^joy_close (Driver *drvthis)$/
joy_get_key	joy.c	/^joy_get_key (Driver *drvthis)$/
joy_init	joy.c	/^joy_init (Driver *drvthis)$/
JSIOCGNAME	joy.c	/^#define JSIOCGNAME(len)           _IOC(_IOC_READ, /
LB216_backlight	lb216.c	/^LB216_backlight(Driver * drvthis, int on)$/
LB216_cellheight	lb216.c	/^LB216_cellheight (Driver *drvthis)$/
LB216_cellwidth	lb216.c	/^LB216_cellwidth (Driver *drvthis)$/
LB216_chr	lb216.c	/^LB216_chr(Driver * drvthis, int x, int y, char c)$/
LB216_clear	lb216.c	/^LB216_clear (Driver * drvthis)$/
LB216_close	lb216.c	/^LB216_close(Driver * drvthis)$/
LB216_flush	lb216.c	/^LB216_flush(Driver * drvthis)$/
LB216_hbar	lb216.c	/^LB216_hbar(Driver * drvthis, int x, int y, int len/
LB216_height	lb216.c	/^LB216_height (Driver *drvthis)$/
LB216_hidecursor	lb216.c	/^static void LB216_hidecursor(Driver * drvthis)$/
LB216_icon	lb216.c	/^LB216_icon(Driver * drvthis, int x, int y, int ico/
LB216_init_hbar	lb216.c	/^LB216_init_hbar(Driver * drvthis)$/
LB216_init	lb216.c	/^LB216_init(Driver * drvthis)$/
LB216_init_vbar	lb216.c	/^LB216_init_vbar(Driver * drvthis)$/
LB216_reboot	lb216.c	/^static void LB216_reboot(Driver * drvthis)$/
LB216_set_char	lb216.c	/^LB216_set_char(Driver * drvthis, int n, char *dat)/
LB216_string	lb216.c	/^LB216_string (Driver * drvthis, int x, int y, char/
LB216_vbar	lb216.c	/^LB216_vbar(Driver * drvthis, int x, int len)$/
LB216_width	lb216.c	/^LB216_width (Driver *drvthis)$/
lcdm001_chr	lcdm001.c	/^lcdm001_chr (Driver *drvthis, int x, int y, char c/
lcdm001_clear	lcdm001.c	/^lcdm001_clear (Driver *drvthis)$/
lcdm001_close	lcdm001.c	/^lcdm001_close (Driver *drvthis)$/
lcdm001_cursorblink	lcdm001.c	/^lcdm001_cursorblink(Driver *drvthis, int on)$/
lcdm001_flush	lcdm001.c	/^lcdm001_flush (Driver *drvthis)$/
lcdm001_get_key	lcdm001.c	/^lcdm001_get_key (Driver *drvthis)$/
lcdm001_height	lcdm001.c	/^lcdm001_height (Driver *drvthis)$/
lcdm001_init	lcdm001.c	/^lcdm001_init (Driver *drvthis)$/
lcdm001_old_hbar	lcdm001.c	/^lcdm001_old_hbar(Driver *drvthis, int x, int y, in/
lcdm001_old_icon	lcdm001.c	/^lcdm001_old_icon (Driver *drvthis, int which, char/
lcdm001_old_vbar	lcdm001.c	/^lcdm001_old_vbar(Driver *drvthis, int x, int len)$/
lcdm001_output	lcdm001.c	/^lcdm001_output (Driver *drvthis, int state)$/
lcdm001_parse_keypad_setting	lcdm001.c	/^static char lcdm001_parse_keypad_setting(Driver *d/
lcdm001_string	lcdm001.c	/^lcdm001_string (Driver *drvthis, int x, int y, cha/
lcdm001_width	lcdm001.c	/^lcdm001_width (Driver *drvthis)$/
lcdserializer_HD44780_backlight	hd44780-lcdserializer.c	/^lcdserializer_HD44780_backlight (PrivateData *p, u/
lcdserializer_HD44780_scankeypad	hd44780-lcdserializer.c	/^lcdserializer_HD44780_scankeypad (PrivateData *p)$/
lcdserializer_HD44780_senddata	hd44780-lcdserializer.c	/^lcdserializer_HD44780_senddata (PrivateData *p, un/
lcdserLpt_HD44780_backlight	hd44780-serialLpt.c	/^lcdserLpt_HD44780_backlight (PrivateData *p, unsig/
lcdserLpt_HD44780_scankeypad	hd44780-serialLpt.c	/^unsigned char lcdserLpt_HD44780_scankeypad (Privat/
lcdserLpt_HD44780_senddata	hd44780-serialLpt.c	/^lcdserLpt_HD44780_senddata (PrivateData *p, unsign/
lcdstat_HD44780_backlight	hd44780-4bit.c	/^void lcdstat_HD44780_backlight (PrivateData *p, un/
lcdstat_HD44780_readkeypad	hd44780-4bit.c	/^unsigned char lcdstat_HD44780_readkeypad (PrivateD/
lcdstat_HD44780_senddata	hd44780-4bit.c	/^lcdstat_HD44780_senddata (PrivateData *p, unsigned/
lcdtime_HD44780_backlight	hd44780-ext8bit.c	/^void lcdtime_HD44780_backlight (PrivateData *p, un/
lcdtime_HD44780_output	hd44780-ext8bit.c	/^void lcdtime_HD44780_output(PrivateData *p, int da/
lcdtime_HD44780_readkeypad	hd44780-ext8bit.c	/^unsigned char lcdtime_HD44780_readkeypad (PrivateD/
lcdtime_HD44780_senddata	hd44780-ext8bit.c	/^lcdtime_HD44780_senddata (PrivateData *p, unsigned/
lcdwinamp_HD44780_backlight	hd44780-winamp.c	/^void lcdwinamp_HD44780_backlight (PrivateData *p, /
lcdwinamp_HD44780_output	hd44780-winamp.c	/^void lcdwinamp_HD44780_output(PrivateData *p, int /
lcdwinamp_HD44780_readkeypad	hd44780-winamp.c	/^unsigned char lcdwinamp_HD44780_readkeypad (Privat/
lcdwinamp_HD44780_senddata	hd44780-winamp.c	/^lcdwinamp_HD44780_senddata (PrivateData *p, unsign/
lcterm_chr	lcterm.c	/^lcterm_chr (Driver *drvthis, int x, int y, char ch/
lcterm_clear	lcterm.c	/^lcterm_clear (Driver *drvthis)$/
lcterm_close	lcterm.c	/^lcterm_close (Driver *drvthis)$/
lcterm_flush	lcterm.c	/^lcterm_flush (Driver *drvthis)$/
lcterm_hbar	lcterm.c	/^lcterm_hbar(Driver *drvthis, int x, int y, int len/
lcterm_height	lcterm.c	/^lcterm_height (Driver *drvthis)$/
lcterm_icon	lcterm.c	/^lcterm_icon (Driver *drvthis, int x, int y, int ic/
lcterm_init_hbar	lcterm.c	/^lcterm_init_hbar (Driver *drvthis)$/
lcterm_init	lcterm.c	/^lcterm_init (Driver *drvthis)$/
lcterm_init_num	lcterm.c	/^lcterm_init_num (Driver *drvthis)$/
lcterm_init_vbar	lcterm.c	/^lcterm_init_vbar (Driver *drvthis)$/
lcterm_num	lcterm.c	/^lcterm_num (Driver *drvthis, int x, int num)$/
lcterm_set_char	lcterm.c	/^lcterm_set_char (Driver *drvthis, int n, char *dat/
lcterm_string	lcterm.c	/^lcterm_string (Driver *drvthis, int x, int y, char/
lcterm_vbar	lcterm.c	/^lcterm_vbar (Driver *drvthis, int x, int y, int le/
lcterm_width	lcterm.c	/^lcterm_width (Driver *drvthis)$/
lib_adv_bignum	adv_bignum.c	/^lib_adv_bignum(Driver *drvthis, int x, int num, in/
lib_hbar_static	lcd_lib.c	/^lib_hbar_static (Driver *drvthis, int x, int y, in/
lib_vbar_static	lcd_lib.c	/^lib_vbar_static (Driver *drvthis, int x, int y, in/
lircin_close	lircin.c	/^lircin_close (Driver *drvthis)$/
lircin_get_key	lircin.c	/^lircin_get_key (Driver *drvthis)$/
lircin_init	lircin.c	/^lircin_init (Driver *drvthis)$/
lis2_HD44780_backlight	hd44780-lis2.c	/^void lis2_HD44780_backlight (PrivateData *p, unsig/
lis2_HD44780_scankeypad	hd44780-lis2.c	/^unsigned char lis2_HD44780_scankeypad (PrivateData/
lis2_HD44780_senddata	hd44780-lis2.c	/^void lis2_HD44780_senddata (PrivateData *p, unsign/
LL_AddNode	LL.c	/^LL_AddNode (LinkedList * list, void *add)	\/\/ Adds /
LL_DeleteNode	LL.c	/^LL_DeleteNode (LinkedList * list)$/
LL_Dequeue	LL.h	/^#define LL_Dequeue(list) LL_Shift(list)$/
LL_Destroy	LL.c	/^LL_Destroy (LinkedList * list)$/
LL_dprint	LL.c	/^LL_dprint (LinkedList * list)$/
LL_End	LL.c	/^LL_End (LinkedList * list)$/
LL_Enqueue	LL.h	/^#define LL_Enqueue(list,add) LL_Push(list,add)$/
LL_Find	LL.c	/^LL_Find (LinkedList * list, int compare (void *, v/
LL_GetByIndex	LL.c	/^LL_GetByIndex (LinkedList * list, int index)$/
LL_GetFirst	LL.c	/^LL_GetFirst (LinkedList * list)			  \/\/ gets data f/
LL_GetLast	LL.c	/^LL_GetLast (LinkedList * list)			  \/\/            ./
LL_Get	LL.c	/^LL_Get (LinkedList * list)$/
LL_GetNext	LL.c	/^LL_GetNext (LinkedList * list)			  \/\/            ./
LL_GetNode	LL.c	/^LL_GetNode (LinkedList * list)$/
LL_GetPrev	LL.c	/^LL_GetPrev (LinkedList * list)			  \/\/            ./
LL_InsertNode	LL.c	/^LL_InsertNode (LinkedList * list, void *add)	\/\/ Ad/
LL_Length	LL.c	/^LL_Length (LinkedList * list)			  \/\/ Returns # of /
LL_Look	LL.c	/^LL_Look (LinkedList * list)				  \/\/ Peek at first /
LL_new	LL.c	/^LL_new ()$/
LL_Next	LL.c	/^LL_Next (LinkedList * list)$/
LL_node_DestroyData	LL.c	/^LL_node_DestroyData (LL_node * node)$/
LL_node_Destroy	LL.c	/^LL_node_Destroy (LL_node * node)$/
LL_node_Unlink	LL.c	/^LL_node_Unlink (LL_node * node)$/
LL_nSwapNodes	LL.c	/^LL_nSwapNodes (int one, int two)	\/\/ Switch two nod/
LL_Pop	LL.c	/^LL_Pop (LinkedList * list)				  \/\/ Remove node fro/
LL_Prev	LL.c	/^LL_Prev (LinkedList * list)$/
LL_PriorityEnqueue	LL.c	/^LL_PriorityEnqueue (LinkedList * list, void *add, /
LL_Push	LL.c	/^LL_Push (LinkedList * list, void *add)  \/\/ Add nod/
LL_Put	LL.c	/^LL_Put (LinkedList * list, void *data)$/
LL_PutNode	LL.c	/^LL_PutNode (LinkedList * list, LL_node * node)$/
LL_Remove	LL.c	/^LL_Remove (LinkedList * list, void *data)$/
LL_Rewind	LL.c	/^LL_Rewind (LinkedList * list)$/
LL_Roll	LL.c	/^LL_Roll (LinkedList * list)				  \/\/ Make last node/
LL_Shift	LL.c	/^LL_Shift (LinkedList * list)				  \/\/ Remove node f/
LL_Sort	LL.c	/^LL_Sort (LinkedList * list, int compare (void *, v/
LL_SwapNodes	LL.c	/^LL_SwapNodes (LL_node * one, LL_node * two)	\/\/ Swi/
LL_Top	LL.c	/^LL_Top (LinkedList * list)				  \/\/ Peek at end nod/
LL_UnRoll	LL.c	/^LL_UnRoll (LinkedList * list)			  \/\/ Roll the othe/
LL_Unshift	LL.c	/^LL_Unshift (LinkedList * list, void *add)	\/\/ Add n/
machine_close	machine_NetBSD.c	/^int machine_close()$/
machine_get_battstat	machine_NetBSD.c	/^int machine_get_battstat(int *acstat, int *battfla/
machine_get_fs	machine_NetBSD.c	/^int machine_get_fs(mounts_type fs[], int *cnt)$/
machine_get_loadavg	machine_NetBSD.c	/^int machine_get_loadavg(double *load)$/
machine_get_load	machine_NetBSD.c	/^int machine_get_load(load_type *curr_load)$/
machine_get_meminfo	machine_NetBSD.c	/^int machine_get_meminfo(meminfo_type *result)$/
machine_get_procs	machine_NetBSD.c	/^int machine_get_procs(LinkedList *procs)$/
machine_get_smpload	machine_NetBSD.c	/^int machine_get_smpload(load_type *result, int *nu/
machine_get_uptime	machine_NetBSD.c	/^int machine_get_uptime(double *up, double *idle)$/
machine_init	machine_NetBSD.c	/^int machine_init()$/
main_loop	lcdexec.c	/^int main_loop ()$/
max	menuitem.h	/^#define max(a,b) (((a) > (b)) ? (a) : (b))$/
max	sed1330.c	/^#define max(a,b) (((a) > (b)) ? (a) : (b))$/
mem_screen	mem.c	/^mem_screen (int rep, int display, int *flags_ptr)$/
mem_top_screen	mem.c	/^mem_top_screen (int rep, int display, int *flags_p/
menu_add_item_func	menu_commands.c	/^menu_add_item_func (Client * c, int argc, char **a/
menu_add_item	menu.c	/^menu_add_item (Menu *menu, MenuItem *item)$/
menu_build_screen	menu.c	/^void menu_build_screen (MenuItem *menu, Screen *s)/
menu_create	menu.c	/^menu_create (char *id, MenuEventFunc(*event_func),/
menu_del_item_func	menu_commands.c	/^menu_del_item_func (Client * c, int argc, char **a/
menu_destroy_all_items	menu.c	/^menu_destroy_all_items (Menu *menu)$/
menu_destroy	menu.c	/^menu_destroy (Menu *menu)$/
MenuEventFunc	menu_commands.c	/^MenuEventFunc (menu_commands_handler)$/
MenuEventFunc	menuitem.h	/^#define MenuEventFunc(f) int (f) (struct MenuItem /
menu_find_item	menu.c	/^MenuItem *menu_find_item (Menu *menu, char *id, bo/
menu_get_current_item	menu.c	/^MenuItem *menu_get_current_item (Menu *menu)$/
menu_getfirst_item	menu.h	/^static inline MenuItem *menu_getfirst_item (Menu */
menu_get_index_of	menu.c	/^menu_get_index_of(Menu * menu, char * item_id)$/
menu_get_item_for_predecessor_check	menu.c	/^MenuItem * menu_get_item_for_predecessor_check(Men/
menu_get_item_for_successor_check	menu.c	/^MenuItem * menu_get_item_for_successor_check(Menu /
menu_getnext_item	menu.h	/^static inline MenuItem *menu_getnext_item (Menu *m/
menu_get_subitem	menu.c	/^menu_get_subitem(Menu * menu, int index)$/
menu_goto_func	menu_commands.c	/^menu_goto_func (Client * c, int argc, char **argv)/
menuitem_create_action	menuitem.c	/^MenuItem *menuitem_create_action (char *id, MenuEv/
menuitem_create_alpha	menuitem.c	/^MenuItem *menuitem_create_alpha (char *id, MenuEve/
menuitem_create_checkbox	menuitem.c	/^MenuItem *menuitem_create_checkbox (char *id, Menu/
menuitem_create_ip	menuitem.c	/^MenuItem *menuitem_create_ip (char *id, MenuEventF/
menuitem_create	menuitem.c	/^MenuItem *menuitem_create (MenuItemType type, char/
menuitem_create_numeric	menuitem.c	/^MenuItem *menuitem_create_numeric (char *id, MenuE/
menuitem_create_ring	menuitem.c	/^MenuItem *menuitem_create_ring (char *id, MenuEven/
menuitem_create_slider	menuitem.c	/^MenuItem *menuitem_create_slider (char *id, MenuEv/
menuitem_destroy_alpha	menuitem.c	/^void menuitem_destroy_alpha (MenuItem *item)$/
menuitem_destroy_ip	menuitem.c	/^void menuitem_destroy_ip (MenuItem *item)$/
menuitem_destroy	menuitem.c	/^void menuitem_destroy (MenuItem *item)$/
menuitem_destroy_numeric	menuitem.c	/^void menuitem_destroy_numeric (MenuItem *item)$/
menuitem_destroy_ring	menuitem.c	/^void menuitem_destroy_ring (MenuItem *item)$/
menuitem_destroy_slider	menuitem.c	/^void menuitem_destroy_slider (MenuItem *item)$/
menuitem_eventtypename_to_eventtype	menuitem.c	/^MenuEventType menuitem_eventtypename_to_eventtype /
menuitem_eventtype_to_eventtypename	menuitem.c	/^char *menuitem_eventtype_to_eventtypename (MenuEve/
menuitem_get_client	menuitem.c	/^Client * menuitem_get_client(MenuItem * item)$/
menuitem_predecessor2menuresult	menuitem.c	/^MenuResult menuitem_predecessor2menuresult(char *p/
menuitem_process_input_alpha	menuitem.c	/^MenuResult menuitem_process_input_alpha (MenuItem /
menuitem_process_input_ip	menuitem.c	/^MenuResult menuitem_process_input_ip (MenuItem *it/
menuitem_process_input	menuitem.c	/^MenuResult menuitem_process_input (MenuItem *item,/
menuitem_process_input_numeric	menuitem.c	/^MenuResult menuitem_process_input_numeric (MenuIte/
menuitem_process_input_slider	menuitem.c	/^MenuResult menuitem_process_input_slider (MenuItem/
menuitem_rebuild_screen_alpha	menuitem.c	/^void menuitem_rebuild_screen_alpha (MenuItem *item/
menuitem_rebuild_screen_ip	menuitem.c	/^void menuitem_rebuild_screen_ip (MenuItem *item, S/
menuitem_rebuild_screen	menuitem.c	/^void menuitem_rebuild_screen (MenuItem *item, Scre/
menuitem_rebuild_screen_numeric	menuitem.c	/^void menuitem_rebuild_screen_numeric (MenuItem *it/
menuitem_rebuild_screen_slider	menuitem.c	/^void menuitem_rebuild_screen_slider (MenuItem *ite/
menuitem_reset_alpha	menuitem.c	/^void menuitem_reset_alpha (MenuItem *item)$/
menuitem_reset_ip	menuitem.c	/^void menuitem_reset_ip (MenuItem *item)$/
menuitem_reset	menuitem.c	/^void menuitem_reset (MenuItem *item)$/
menuitem_reset_numeric	menuitem.c	/^void menuitem_reset_numeric (MenuItem *item)$/
menuitem_search	menuitem.c	/^MenuItem *menuitem_search(char *menu_id, Client *c/
menuitem_successor2menuresult	menuitem.c	/^MenuResult menuitem_successor2menuresult(char *suc/
menuitem_typename_to_type	menuitem.c	/^MenuItemType menuitem_typename_to_type (char *name/
menuitem_type_to_typename	menuitem.c	/^char *menuitem_type_to_typename (MenuItemType type/
menuitem_update_screen_alpha	menuitem.c	/^void menuitem_update_screen_alpha (MenuItem *item,/
menuitem_update_screen_ip	menuitem.c	/^void menuitem_update_screen_ip (MenuItem *item, Sc/
menuitem_update_screen	menuitem.c	/^void menuitem_update_screen (MenuItem *item, Scree/
menuitem_update_screen_numeric	menuitem.c	/^void menuitem_update_screen_numeric (MenuItem *ite/
menuitem_update_screen_slider	menuitem.c	/^void menuitem_update_screen_slider (MenuItem *item/
menu_process_input	menu.c	/^MenuResult menu_process_input(Menu *menu, MenuToke/
menu_remove_item	menu.c	/^menu_remove_item (Menu *menu, MenuItem *item)$/
menu_reset	menu.c	/^void menu_reset (Menu *menu)$/
menuscreen_add_screen	menuscreens.c	/^menuscreen_add_screen (Screen * s)$/
menuscreen_create_menu	menuscreens.c	/^void menuscreen_create_menu ()$/
menuscreen_get_main	menuscreens.c	/^menuscreen_get_main()$/
menuscreen_goto	menuscreens.c	/^menuscreen_goto (Menu * menu)$/
menuscreen_inform_item_destruction	menuscreens.c	/^void menuscreen_inform_item_destruction (MenuItem /
menuscreen_inform_item_modified	menuscreens.c	/^void menuscreen_inform_item_modified (MenuItem * i/
menuscreen_key_handler	menuscreens.c	/^void menuscreen_key_handler (const char *key)$/
menuscreen_remove_screen	menuscreens.c	/^menuscreen_remove_screen (Screen * s)$/
menuscreen_set_main	menuscreens.c	/^menuscreen_set_main (Menu * menu)$/
menuscreens_init	menuscreens.c	/^int menuscreens_init()$/
menuscreens_shutdown	menuscreens.c	/^int menuscreens_shutdown()$/
menuscreen_switch_item	menuscreens.c	/^void menuscreen_switch_item (MenuItem * new_menuit/
menu_select_subitem	menu.c	/^void menu_select_subitem(Menu *menu, char * subite/
menu_set_association	menu.c	/^void menu_set_association(Menu *menu, void *assoc)/
menu_set_item_func	menu_commands.c	/^menu_set_item_func (Client * c, int argc, char **a/
menu_set_main_func	menu_commands.c	/^menu_set_main_func (Client * c, int argc, char **a/
menu_update_screen	menu.c	/^void menu_update_screen (MenuItem *menu, Screen *s/
menu_visible_item_count	menu.c	/^menu_visible_item_count(Menu * menu)$/
mini_clock_screen	chrono.c	/^mini_clock_screen (int rep, int display, int *flag/
min	menu.h	/^#define min(a,b) (((a) < (b)) ? (a) : (b))$/
min	pylcd.c	/^#define min(a, b) ((a)<(b) ? (a) : (b))$/
Mlcdexec	lcdexec.c	/^int main( int argc, char **argv )$/
Mmain	main.c	/^main(int argc, char **argv)$/
mode_close	mode.c	/^mode_close()$/
mode_init	mode.c	/^mode_init()$/
ms6931_attn	ms6931.c	/^ms6931_attn(int fd, int len)$/
ms6931_backlight	ms6931.c	/^ms6931_backlight (Driver *drvthis, int on)$/
ms6931_chr	ms6931.c	/^ms6931_chr (Driver *drvthis, int x, int y, char c)/
ms6931_clear	ms6931.c	/^ms6931_clear (Driver *drvthis)$/
ms6931_close	ms6931.c	/^ms6931_close (Driver *drvthis)$/
ms6931_cursor	ms6931.c	/^ms6931_cursor (Driver *drvthis, int x, int y, int /
ms6931_draw_frame	ms6931.c	/^ms6931_draw_frame (Driver *drvthis, unsigned char /
ms6931_flush	ms6931.c	/^ms6931_flush (Driver *drvthis)$/
ms6931_get_key	ms6931.c	/^ms6931_get_key (Driver *drvthis)$/
ms6931_hbar	ms6931.c	/^ms6931_hbar (Driver *drvthis, int x, int y, int le/
ms6931_heartbeat	ms6931.c	/^ms6931_heartbeat (Driver *drvthis, int state)$/
ms6931_height	ms6931.c	/^ms6931_height (Driver *drvthis)$/
ms6931_init	ms6931.c	/^ms6931_init (Driver *drvthis)$/
ms6931_setpos	ms6931.c	/^ms6931_setpos(int fd, int pos)$/
ms6931_string	ms6931.c	/^ms6931_string (Driver *drvthis, int x, int y, char/
ms6931_width	ms6931.c	/^ms6931_width (Driver *drvthis)$/
ms6931_write	ms6931.c	/^ms6931_write(int fd, void *str, int len)$/
MTC_S16209X_backlight	mtc_s16209x.c	/^MTC_S16209X_backlight (Driver * drvthis, int on)$/
MTC_S16209X_cellheight	mtc_s16209x.c	/^MTC_S16209X_cellheight (Driver * drvthis)$/
MTC_S16209X_cellwidth	mtc_s16209x.c	/^MTC_S16209X_cellwidth (Driver * drvthis)$/
MTC_S16209X_chr	mtc_s16209x.c	/^MTC_S16209X_chr (Driver * drvthis, int x, int y, c/
MTC_S16209X_clear	mtc_s16209x.c	/^MTC_S16209X_clear (Driver * drvthis)$/
MTC_S16209X_close	mtc_s16209x.c	/^MTC_S16209X_close (Driver * drvthis)$/
MTC_S16209X_flush	mtc_s16209x.c	/^MTC_S16209X_flush (Driver * drvthis)$/
MTC_S16209X_hbar	mtc_s16209x.c	/^MTC_S16209X_hbar (Driver * drvthis, int x, int y, /
MTC_S16209X_height	mtc_s16209x.c	/^MTC_S16209X_height (Driver * drvthis)$/
MTC_S16209X_hidecursor	mtc_s16209x.c	/^MTC_S16209X_hidecursor (Driver * drvthis)$/
MTC_S16209X_icon	mtc_s16209x.c	/^MTC_S16209X_icon (Driver * drvthis, int x, int y, /
MTC_S16209X_init_hbar	mtc_s16209x.c	/^MTC_S16209X_init_hbar (Driver * drvthis)$/
MTC_S16209X_init	mtc_s16209x.c	/^MTC_S16209X_init (Driver * drvthis)$/
MTC_S16209X_init_vbar	mtc_s16209x.c	/^MTC_S16209X_init_vbar (Driver * drvthis)$/
MTC_S16209X_reboot	mtc_s16209x.c	/^MTC_S16209X_reboot (Driver * drvthis)$/
MTC_S16209X_set_char	mtc_s16209x.c	/^MTC_S16209X_set_char (Driver * drvthis, int n, cha/
MTC_S16209X_string	mtc_s16209x.c	/^MTC_S16209X_string (Driver * drvthis, int x, int y/
MTC_S16209X_vbar	mtc_s16209x.c	/^MTC_S16209X_vbar (Driver * drvthis, int x, int y, /
MTC_S16209X_width	mtc_s16209x.c	/^MTC_S16209X_width (Driver * drvthis)$/
MtxOrb_ask_bar	MtxOrb.c	/^MtxOrb_ask_bar (Driver *drvthis, int type)$/
MtxOrb_autoscroll	MtxOrb.c	/^MtxOrb_autoscroll (Driver *drvthis, int on)$/
MtxOrb_backlight	MtxOrb.c	/^MtxOrb_backlight (Driver *drvthis, int on)$/
MtxOrb_chr	MtxOrb.c	/^MtxOrb_chr (Driver *drvthis, int x, int y, char c)/
MtxOrb_clear	MtxOrb.c	/^MtxOrb_clear (Driver *drvthis)$/
MtxOrb_close	MtxOrb.c	/^MtxOrb_close (Driver *drvthis)$/
MtxOrb_cursorblink	MtxOrb.c	/^MtxOrb_cursorblink (Driver *drvthis, int on)$/
MtxOrb_flush	MtxOrb.c	/^MtxOrb_flush (Driver *drvthis)$/
MtxOrb_get_contrast	MtxOrb.c	/^MtxOrb_get_contrast (Driver *drvthis)$/
MtxOrb_get_info	MtxOrb.c	/^MtxOrb_get_info (Driver *drvthis)$/
MtxOrb_get_key	MtxOrb.c	/^MtxOrb_get_key (Driver *drvthis)$/
MtxOrb_hbar	MtxOrb.c	/^MtxOrb_hbar (Driver * drvthis, int x, int y, int l/
MtxOrb_height	MtxOrb.c	/^MtxOrb_height (Driver *drvthis)$/
MtxOrb_icon	MtxOrb.c	/^MtxOrb_icon (Driver *drvthis, int x, int y, int ic/
MtxOrb_init	MtxOrb.c	/^MtxOrb_init (Driver *drvthis)$/
MtxOrb_linewrap	MtxOrb.c	/^MtxOrb_linewrap (Driver *drvthis, int on)$/
MtxOrb_mold_vbar	MtxOrb.c	/^static void MtxOrb_mold_vbar (Driver *drvthis, int/
MtxOrb_num	MtxOrb.c	/^MtxOrb_num (Driver *drvthis, int pos, int val)$/
MtxOrb_old_hbar	MtxOrb.c	/^static void MtxOrb_old_hbar (Driver *drvthis, int /
MtxOrb_output	MtxOrb.c	/^MtxOrb_output (Driver *drvthis, int on)$/
MtxOrb_parse_keypad_setting	MtxOrb.c	/^static char MtxOrb_parse_keypad_setting (Driver *d/
MtxOrb_set_char	MtxOrb.c	/^MtxOrb_set_char (Driver *drvthis, int n, char *dat/
MtxOrb_set_contrast	MtxOrb.c	/^MtxOrb_set_contrast (Driver *drvthis, int promille/
MtxOrb_set_known_char	MtxOrb.c	/^MtxOrb_set_known_char (Driver *drvthis, int car, i/
MtxOrb_string	MtxOrb.c	/^MtxOrb_string (Driver *drvthis, int x, int y, char/
MtxOrb_vbar	MtxOrb.c	/^MtxOrb_vbar (Driver * drvthis, int x, int y, int l/
MtxOrb_width	MtxOrb.c	/^MtxOrb_width (Driver *drvthis)$/
noop_func	server_commands.c	/^noop_func (Client * c, int argc, char **argv)$/
NoritakeVFD_autoscroll	NoritakeVFD.c	/^NoritakeVFD_autoscroll (Driver *drvthis, int on)$/
NoritakeVFD_cellheight	NoritakeVFD.c	/^NoritakeVFD_cellheight (Driver *drvthis)$/
NoritakeVFD_cellwidth	NoritakeVFD.c	/^NoritakeVFD_cellwidth (Driver *drvthis)$/
NoritakeVFD_chr	NoritakeVFD.c	/^NoritakeVFD_chr (Driver *drvthis, int x, int y, ch/
NoritakeVFD_clear	NoritakeVFD.c	/^NoritakeVFD_clear (Driver *drvthis)$/
NoritakeVFD_close	NoritakeVFD.c	/^NoritakeVFD_close (Driver *drvthis)$/
NoritakeVFD_draw_frame	NoritakeVFD.c	/^NoritakeVFD_draw_frame (Driver *drvthis, unsigned /
NoritakeVFD_flush	NoritakeVFD.c	/^NoritakeVFD_flush (Driver *drvthis)$/
NoritakeVFD_get_brightness	NoritakeVFD.c	/^NoritakeVFD_get_brightness(Driver *drvthis, int st/
NoritakeVFD_hbar	NoritakeVFD.c	/^NoritakeVFD_hbar (Driver *drvthis, int x, int y, i/
NoritakeVFD_height	NoritakeVFD.c	/^NoritakeVFD_height (Driver *drvthis)$/
NoritakeVFD_hidecursor	NoritakeVFD.c	/^NoritakeVFD_hidecursor (Driver *drvthis)$/
NoritakeVFD_icon	NoritakeVFD.c	/^NoritakeVFD_icon (Driver *drvthis, int x, int y, i/
NoritakeVFD_init_hbar	NoritakeVFD.c	/^NoritakeVFD_init_hbar (Driver *drvthis)$/
NoritakeVFD_init	NoritakeVFD.c	/^NoritakeVFD_init (Driver *drvthis)$/
NoritakeVFD_init_vbar	NoritakeVFD.c	/^NoritakeVFD_init_vbar (Driver *drvthis)$/
NoritakeVFD_reboot	NoritakeVFD.c	/^NoritakeVFD_reboot (Driver *drvthis)$/
NoritakeVFD_set_brightness	NoritakeVFD.c	/^NoritakeVFD_set_brightness (Driver *drvthis, int s/
NoritakeVFD_set_char	NoritakeVFD.c	/^NoritakeVFD_set_char (Driver *drvthis, int n, char/
NoritakeVFD_string	NoritakeVFD.c	/^NoritakeVFD_string (Driver *drvthis, int x, int y,/
NoritakeVFD_vbar	NoritakeVFD.c	/^NoritakeVFD_vbar (Driver *drvthis, int x, int y, i/
NoritakeVFD_width	NoritakeVFD.c	/^NoritakeVFD_width (Driver *drvthis)$/
output_func	server_commands.c	/^output_func (Client * c, int argc, char **argv)$/
output_GPL_notice	main.c	/^output_GPL_notice(void)$/
output_help_screen	main.c	/^output_help_screen(void)$/
pagetok	machine_NetBSD.c	/^#define pagetok(size) ((size) << pageshift)$/
parse_all_client_messages	parse.c	/^parse_all_client_messages ()$/
parse_message	parse.c	/^static int parse_message (const char *str, Client /
parse_span_list	hd44780.c	/^parse_span_list (int *spanListArray[], int *spLsiz/
PeekByte	CFontz633io.c	/^unsigned char PeekByte(ReceiveBuffer *rb)$/
PeekBytesAvail	CFontz633io.c	/^int PeekBytesAvail(ReceiveBuffer *rb)$/
picanlcd_HD44780_backlight	hd44780-picanlcd.c	/^picanlcd_HD44780_backlight (PrivateData *p, unsign/
picanlcd_HD44780_scankeypad	hd44780-picanlcd.c	/^picanlcd_HD44780_scankeypad (PrivateData *p)$/
picanlcd_HD44780_senddata	hd44780-picanlcd.c	/^picanlcd_HD44780_senddata (PrivateData *p, unsigne/
portable_snprintf	snprintf.c	/^int portable_snprintf(char *str, size_t str_m, con/
port_access_multiple	port.h	/^static inline int port_access_multiple (unsigned s/
port_access	port.h	/^static inline int port_access (unsigned short port/
port_deny_multiple	port.h	/^static inline int port_deny_multiple (unsigned sho/
port_deny	port.h	/^static inline int port_deny (unsigned short port) /
port_in	port.h	/^static inline int port_in (unsigned short port) {$/
port_out	port.h	/^static inline void port_out (unsigned short port, /
POSITION	t6963.h	/^#define POSITION(x,y)  ((y)*lcd.wid + (x))$/
print_packet	CFontz633io.c	/^print_packet(COMMAND_PACKET *packet)$/
process_command_line	lcdexec.c	/^int process_command_line( int argc, char **argv )$/
process_command_line	main.c	/^process_command_line(int argc, char **argv)$/
process_config	configfile.c	/^int process_config( section ** current_section, ch/
process_configfile	lcdexec.c	/^int process_configfile( char * configfile )$/
process_configfile	main.c	/^process_configfile(char *configfile)$/
process_response	lcdexec.c	/^int process_response( char * str )$/
PROCSIZE	machine_NetBSD.c	/^#define PROCSIZE(pp) ((pp)->p_vm_tsize + (pp)->p_v/
pyramid_chr	pylcd.c	/^MODULE_EXPORT void pyramid_chr (Driver *drvthis, int/
pyramid_clear	pylcd.c	/^MODULE_EXPORT void pyramid_clear (Driver *drvthis)$/
pyramid_close	pylcd.c	/^MODULE_EXPORT void pyramid_close (Driver *drvthis)$/
pyramid_cursor	pylcd.c	/^MODULE_EXPORT void pyramid_cursor (Driver *drvthis, /
pyramid_flush	pylcd.c	/^MODULE_EXPORT void pyramid_flush (Driver *drvthis)$/
pyramid_get_key	pylcd.c	/^MODULE_EXPORT const char *pyramid_get_key (Driver *d/
pyramid_height	pylcd.c	/^MODULE_EXPORT int  pyramid_height (Driver *drvthis)$/
pyramid_init	pylcd.c	/^MODULE_EXPORT int  pyramid_init (Driver *drvthis, ch/
pyramid_output	pylcd.c	/^MODULE_EXPORT void pyramid_output (Driver *drvthis, /
pyramid_string	pylcd.c	/^MODULE_EXPORT void pyramid_string (Driver *drvthis, /
pyramid_width	pylcd.c	/^MODULE_EXPORT int  pyramid_width (Driver *drvthis)$/
rawshift	hd44780-serialLpt.c	/^rawshift (PrivateData *p, unsigned char r)$/
read_ACK	pylcd.c	/^int read_ACK(PrivateData *p)$/
Read_LCD	CwLnx.c	/^int Read_LCD(int fd, char *c, int size)$/
read_tele	pylcd.c	/^int read_tele(PrivateData *p, char *bu/
render_frame	render.c	/^render_frame (LinkedList * list,$/
render_screen	render.c	/^render_screen (Screen * s, long int timer)$/
report	report.c	/^void report( const int level, const char *format, /
request_display_height	driver.c	/^request_display_height()$/
request_display_width	driver.c	/^request_display_width()$/
reread	machine_Linux.c	/^reread (int f, char *errmsg)$/
screen_add_func	screen_commands.c	/^screen_add_func (Client * c, int argc, char **argv/
screen_add_key_func	screen_commands.c	/^screen_add_key_func (Client * c, int argc, char **/
screen_add_widget	screen.c	/^screen_add_widget (Screen * s, Widget * w)$/
screen_create	screen.c	/^screen_create (char * id, Client * client)$/
screen_del_func	screen_commands.c	/^screen_del_func (Client * c, int argc, char **argv/
screen_del_key_func	screen_commands.c	/^screen_del_key_func (Client * c, int argc, char **/
screen_destroy	screen.c	/^screen_destroy (Screen * s)$/
screen_find_widget	screen.c	/^screen_find_widget (Screen * s, char *id)$/
screen_getfirst_widget	screen.h	/^static inline Widget * screen_getfirst_widget (Scr/
screen_getnext_widget	screen.h	/^static inline Widget * screen_getnext_widget (Scre/
screenlist_add	screenlist.c	/^screenlist_add (Screen * s)$/
screenlist_current	screenlist.c	/^screenlist_current ()$/
screenlist_goto_next	screenlist.c	/^screenlist_goto_next ()$/
screenlist_goto_prev	screenlist.c	/^screenlist_goto_prev ()$/
screenlist_init	screenlist.c	/^screenlist_init ()$/
screenlist_process	screenlist.c	/^screenlist_process ()$/
screenlist_remove	screenlist.c	/^screenlist_remove (Screen * s)$/
screenlist_shutdown	screenlist.c	/^screenlist_shutdown ()$/
screenlist_switch	screenlist.c	/^screenlist_switch (Screen * s)$/
screen_pri_name_to_pri	screen.c	/^screen_pri_name_to_pri (char * priname)$/
screen_pri_to_pri_name	screen.c	/^screen_pri_to_pri_name (Priority pri)$/
screen_remove_widget	screen.c	/^screen_remove_widget (Screen * s, Widget * w)$/
screen_set_func	screen_commands.c	/^screen_set_func (Client * c, int argc, char **argv/
sed1330_backlight	sed1330.c	/^sed1330_backlight( Driver * drvthis, int on )$/
sed1330_chr	sed1330.c	/^sed1330_chr( Driver * drvthis, int x, int y, char /
sed1330_clear	sed1330.c	/^sed1330_clear( Driver * drvthis )$/
sed1330_close	sed1330.c	/^sed1330_close( Driver * drvthis )$/
sed1330_command	sed1330.c	/^sed1330_command( PrivateData * p, char command, in/
sed1330_flush	sed1330.c	/^sed1330_flush( Driver * drvthis )$/
sed1330_get_key	sed1330.c	/^sed1330_get_key(Driver *drvthis)$/
sed1330_hbar	sed1330.c	/^sed1330_hbar( Driver * drvthis, int x, int y, int /
sed1330_heartbeat	sed1330.c	/^sed1330_heartbeat( Driver * drvthis, int type )$/
sed1330_height	sed1330.c	/^sed1330_height( Driver * drvthis )$/
sed1330_icon	sed1330.c	/^sed1330_icon( Driver * drvthis, int x, int y, int /
sed1330_init	sed1330.c	/^sed1330_init( Driver * drvthis )$/
sed1330_line	sed1330.c	/^sed1330_line ( PrivateData * p, int x1, int y1, in/
sed1330_num	sed1330.c	/^sed1330_num( Driver * drvthis, int x, int y, int n/
sed1330_readkeypad	sed1330.c	/^unsigned char sed1330_readkeypad (PrivateData *p, /
sed1330_rect	sed1330.c	/^sed1330_rect ( PrivateData * p, int x1, int y1, in/
sed1330_scankeypad	sed1330.c	/^unsigned char sed1330_scankeypad(PrivateData *p)$/
sed1330_set_pixel	sed1330.c	/^sed1330_set_pixel( PrivateData * p, int x, int y, /
sed1330_string	sed1330.c	/^sed1330_string( Driver * drvthis, int x, int y, ch/
sed1330_vbar	sed1330.c	/^sed1330_vbar( Driver * drvthis, int x, int y, int /
sed1330_width	sed1330.c	/^sed1330_width( Driver * drvthis )$/
sed1520_cellheight	sed1520.c	/^sed1520_cellheight (Driver *drvthis)$/
sed1520_cellwidth	sed1520.c	/^sed1520_cellwidth (Driver *drvthis)$/
sed1520_chr	sed1520.c	/^sed1520_chr (Driver *drvthis, int x, int y, char c/
sed1520_clear	sed1520.c	/^sed1520_clear (Driver *drvthis)$/
sed1520_close	sed1520.c	/^sed1520_close (Driver *drvthis)$/
sed1520_flush	sed1520.c	/^sed1520_flush (Driver *drvthis)$/
sed1520_height	sed1520.c	/^sed1520_height (Driver *drvthis)$/
sed1520_icon	sed1520.c	/^sed1520_icon (Driver *drvthis, int x, int y, int i/
sed1520_init	sed1520.c	/^sed1520_init (Driver *drvthis)$/
sed1520_num	sed1520.c	/^sed1520_num (Driver *drvthis, int x, int num)$/
sed1520_old_hbar	sed1520.c	/^sed1520_old_hbar (Driver *drvthis, int x, int y, i/
sed1520_old_vbar	sed1520.c	/^sed1520_old_vbar (Driver *drvthis, int x, int len)/
sed1520_set_char	sed1520.c	/^sed1520_set_char (Driver *drvthis, int n, char *da/
sed1520_string	sed1520.c	/^sed1520_string (Driver *drvthis, int x, int y, cha/
sed1520_width	sed1520.c	/^sed1520_width (Driver *drvthis)$/
selectcolumn	sed1520.c	/^selectcolumn (unsigned int port, int column, int c/
selectpage	sed1520.c	/^selectpage (unsigned int port, int page)$/
sem_get	lcd_sem.c	/^sem_get (void)$/
sem_remove	lcd_sem.c	/^sem_remove (int sid)$/
sem_signal	lcd_sem.c	/^sem_signal (int sid)$/
sem_wait	lcd_sem.c	/^sem_wait (int sid)$/
send_ACK	pylcd.c	/^int send_ACK(PrivateData *p)$/
send_bytes_message	CFontz633io.c	/^void send_bytes_message(int fd, unsigned char msg,/
send_onebyte_message	CFontz633io.c	/^void send_onebyte_message(int fd, unsigned char ms/
send_packet	CFontz633io.c	/^send_packet(int fd, COMMAND_PACKET *out, COMMAND_P/
send_tele	pylcd.c	/^int send_tele(PrivateData *p, char *bu/
send_zerobyte_message	CFontz633io.c	/^void send_zerobyte_message(int fd, unsigned char m/
serialVFD_cellheight	serialVFD.c	/^serialVFD_cellheight (Driver *drvthis)$/
serialVFD_cellwidth	serialVFD.c	/^serialVFD_cellwidth (Driver *drvthis)$/
serialVFD_chr	serialVFD.c	/^serialVFD_chr (Driver *drvthis, int x, int y, char/
serialVFD_clear	serialVFD.c	/^serialVFD_clear (Driver *drvthis)$/
serialVFD_close	serialVFD.c	/^serialVFD_close (Driver *drvthis)$/
serialVFD_draw_frame	serialVFD.c	/^serialVFD_draw_frame (Driver *drvthis, char *dat)$/
serialVFD_flush	serialVFD.c	/^serialVFD_flush (Driver *drvthis)$/
serialVFD_get_brightness	serialVFD.c	/^serialVFD_get_brightness(Driver *drvthis, int stat/
serialVFD_get_free_chars	serialVFD.c	/^serialVFD_get_free_chars (Driver *drvthis)$/
serialVFD_get_info	serialVFD.c	/^serialVFD_get_info (Driver *drvthis)$/
serialVFD_hbar	serialVFD.c	/^serialVFD_hbar (Driver *drvthis, int x, int y, int/
serialVFD_height	serialVFD.c	/^serialVFD_height (Driver *drvthis)$/
serialVFD_icon	serialVFD.c	/^serialVFD_icon (Driver *drvthis, int x, int y, int/
serialVFD_init_hbar	serialVFD.c	/^serialVFD_init_hbar (Driver *drvthis)$/
serialVFD_init	serialVFD.c	/^serialVFD_init (Driver *drvthis)$/
serialVFD_init_vbar	serialVFD.c	/^serialVFD_init_vbar (Driver *drvthis)$/
serialVFD_num	serialVFD.c	/^serialVFD_num( Driver * drvthis, int x, int num )$/
serialVFD_put_brightness	serialVFD.c	/^serialVFD_put_brightness (Driver *drvthis)$/
serialVFD_put_char	serialVFD.c	/^serialVFD_put_char (Driver *drvthis, int n)$/
serialVFD_set_brightness	serialVFD.c	/^serialVFD_set_brightness (Driver *drvthis, int sta/
serialVFD_set_char	serialVFD.c	/^serialVFD_set_char (Driver *drvthis, int n, char */
serialVFD_string	serialVFD.c	/^serialVFD_string (Driver *drvthis, int x, int y, c/
serialVFD_vbar	serialVFD.c	/^serialVFD_vbar (Driver *drvthis, int x, int y, int/
serialVFD_width	serialVFD.c	/^serialVFD_width (Driver *drvthis)$/
server_msg	render.c	/^server_msg( const char * text, int expire )$/
server_screen_init	serverscreens.c	/^server_screen_init ()$/
server_screen_shutdown	serverscreens.c	/^server_screen_shutdown ()$/
Set_19200	CwLnx.c	/^void Set_19200(int fd)$/
Set_9600	CwLnx.c	/^void Set_9600(int fd)$/
setaccess	port.h	/^static inline void setaccess(u_long * map, u_int b/
set_background_color	curses_drv.c	/^set_background_color (char * buf) {$/
set_default_settings	main.c	/^set_default_settings(void)$/
SetFan	hd44780-lis2.c	/^void SetFan(int fd, int fan1, int fan2, int fan3, /
set_foreground_color	curses_drv.c	/^set_foreground_color (char * buf) {$/
Set_Insert	CwLnx.c	/^void Set_Insert(int fd, int row, int col)$/
set_leds	pylcd.c	/^int set_leds(PrivateData *p)$/
SetMatrice	hd44780-lis2.c	/^void SetMatrice(PrivateData *p, int fd, int matric/
set_predecessor	menu_commands.c	/^int set_predecessor(MenuItem *item, char *itemid, /
set_reporting	report.c	/^int set_reporting( char *application_name, int new/
set_successor	menu_commands.c	/^int set_successor(MenuItem *item, char *itemid, Cl/
Setup_Port	CwLnx.c	/^void Setup_Port(int fd, speed_t speed)$/
shiftreg	hd44780-serialLpt.c	/^shiftreg (PrivateData *p, unsigned char enableLine/
sleep_func	server_commands.c	/^sleep_func (Client * c, int argc, char **argv)$/
sli_cellheight	wirz-sli.c	/^sli_cellheight (Driver *drvthis)$/
sli_cellwidth	wirz-sli.c	/^sli_cellwidth (Driver *drvthis)$/
sli_chr	wirz-sli.c	/^sli_chr (Driver *drvthis, int x, int y, char c)$/
sli_clear	wirz-sli.c	/^sli_clear (Driver *drvthis)$/
sli_close	wirz-sli.c	/^sli_close (Driver *drvthis)$/
sli_flush	wirz-sli.c	/^sli_flush (Driver *drvthis)$/
sli_hbar	wirz-sli.c	/^sli_hbar (Driver *drvthis, int x, int y, int len, /
sli_height	wirz-sli.c	/^sli_height (Driver *drvthis)$/
sli_icon	wirz-sli.c	/^sli_icon (Driver *drvthis, int x, int y, int icon)/
sli_init_hbar	wirz-sli.c	/^sli_init_hbar (Driver *drvthis)$/
sli_init_vbar	wirz-sli.c	/^sli_init_vbar (Driver *drvthis)$/
sli_init	wirz-sli.c	/^sli_init (Driver *drvthis)$/
sli_set_char	wirz-sli.c	/^sli_set_char (Driver *drvthis, int n, char *dat)$/
sli_string	wirz-sli.c	/^sli_string (Driver *drvthis, int x, int y, char st/
sli_vbar	wirz-sli.c	/^sli_vbar (Driver *drvthis, int x, int y, int len, /
sli_width	wirz-sli.c	/^sli_width (Driver *drvthis)$/
sock_close	sockets.c	/^sock_close (int fd)$/
sock_connect	sockets.c	/^sock_connect (char *host, unsigned short int port)/
sock_create_inet_socket	sock.c	/^sock_create_inet_socket (char * addr, unsigned int/
sock_geterror	sockets.c	/^sock_geterror(void)$/
sock_init_sockaddr	sockets.c	/^sock_init_sockaddr (sockaddr_in *name, const char /
sock_init	sock.c	/^sock_init(char* bind_addr, int bind_port)$/
sock_poll_clients	sock.c	/^sock_poll_clients ()$/
sock_printf_error	sockets.c	/^sock_printf_error(int fd, const char *format, ...\//
sock_printf	sockets.c	/^sock_printf(int fd, const char *format, ...\/*args*/
sock_read_from_client	sock.c	/^sock_read_from_client(struct ClientSocketMap* clie/
sock_recv	sockets.c	/^sock_recv (int fd, void *dest, size_t maxlen)$/
sock_recv_string	sockets.c	/^sock_recv_string (int fd, char *dest, size_t maxle/
sock_send_error	sockets.c	/^int sock_send_error(int fd, char* message)$/
sock_send	sockets.c	/^sock_send (int fd, void *src, size_t size)$/
sock_send_string	sockets.c	/^sock_send_string (int fd, char *string)$/
sock_shutdown	sock.c	/^sock_shutdown ()$/
sort_procs	mem.c	/^sort_procs (void *a, void *b)$/
sprintf_memory	util.c	/^sprintf_memory(char *dst, double value, double rou/
sprintf_percent	util.c	/^sprintf_percent(char *dst, double percent)$/
store_report_message	report.c	/^static void store_report_message( int level, const/
stv5730_cellheight	stv5730.c	/^stv5730_cellheight (Driver *drvthis)$/
stv5730_cellwidth	stv5730.c	/^stv5730_cellwidth (Driver *drvthis)$/
stv5730_chr	stv5730.c	/^stv5730_chr (Driver *drvthis, int x, int y, char c/
stv5730_clear	stv5730.c	/^stv5730_clear (Driver *drvthis)$/
stv5730_close	stv5730.c	/^stv5730_close (Driver *drvthis)$/
stv5730_detect	stv5730.c	/^stv5730_detect (unsigned int port)$/
stv5730_drawchar2fb	stv5730.c	/^stv5730_drawchar2fb (Driver *drvthis, int x, int y/
stv5730_flush	stv5730.c	/^stv5730_flush (Driver *drvthis)$/
stv5730_height	stv5730.c	/^stv5730_height (Driver *drvthis)$/
stv5730_init	stv5730.c	/^stv5730_init (Driver *drvthis)$/
stv5730_is_mute	stv5730.c	/^stv5730_is_mute (unsigned int port)$/
stv5730_locate	stv5730.c	/^stv5730_locate (unsigned int port, unsigned int fl/
stv5730_num	stv5730.c	/^stv5730_num (Driver *drvthis, int x, int num)$/
stv5730_old_hbar	stv5730.c	/^stv5730_old_hbar (Driver *drvthis, int x, int y, i/
stv5730_old_icon	stv5730.c	/^stv5730_old_icon (Driver *drvthis, int which, char/
stv5730_old_vbar	stv5730.c	/^stv5730_old_vbar (Driver *drvthis, int x, int len)/
stv5730_string	stv5730.c	/^stv5730_string (Driver *drvthis, int x, int y, cha/
stv5730_width	stv5730.c	/^stv5730_width (Driver *drvthis)$/
stv5730_write0bit	stv5730.c	/^stv5730_write0bit (unsigned int port, unsigned int/
stv5730_write16bit	stv5730.c	/^stv5730_write16bit (unsigned int port, unsigned in/
stv5730_write8bit	stv5730.c	/^stv5730_write8bit (unsigned int port, unsigned int/
svga_backlight	svgalib_drv.c	/^svga_backlight (Driver *drvthis, int on)$/
svga_cellheight	svgalib_drv.c	/^svga_cellheight (Driver *drvthis)$/
svga_cellwidth	svgalib_drv.c	/^svga_cellwidth (Driver *drvthis)$/
svga_chr	svgalib_drv.c	/^svga_chr (Driver *drvthis, int x, int y, char c)$/
svga_clear	svgalib_drv.c	/^svga_clear (Driver * drvthis)$/
svga_close	svgalib_drv.c	/^svga_close (Driver *drvthis)$/
svga_flush	svgalib_drv.c	/^svga_flush (Driver *drvthis)$/
svga_get_brightness	svgalib_drv.c	/^svga_get_brightness(Driver *drvthis, int state)$/
svga_get_contrast	svgalib_drv.c	/^svga_get_contrast (Driver *drvthis)$/
svga_get_key	svgalib_drv.c	/^svga_get_key (Driver *drvthis)$/
svga_hbar	svgalib_drv.c	/^svga_hbar (Driver *drvthis, int x, int y, int len,/
svga_height	svgalib_drv.c	/^svga_height (Driver *drvthis)$/
svga_init	svgalib_drv.c	/^svga_init (Driver *drvthis)$/
svga_num	svgalib_drv.c	/^svga_num (Driver *drvthis, int x, int num)$/
svga_set_brightness	svgalib_drv.c	/^svga_set_brightness(Driver *drvthis, int state, in/
svga_set_contrast	svgalib_drv.c	/^svga_set_contrast (Driver *drvthis, int promille)$/
svga_string	svgalib_drv.c	/^svga_string (Driver *drvthis, int x, int y, char s/
svga_vbar	svgalib_drv.c	/^svga_vbar (Driver *drvthis, int x, int y, int len,/
svga_width	svgalib_drv.c	/^svga_width (Driver *drvthis)$/
swapmode	machine_FreeBSD.c	/^static int swapmode(int *retavail, int *retfree)$/
SyncPeekPointer	CFontz633io.c	/^void SyncPeekPointer(ReceiveBuffer *rb)$/
SyncReceiveBuffer	CFontz633io.c	/^void SyncReceiveBuffer(ReceiveBuffer *rb, int fd, /
t6963_chr	t6963.c	/^t6963_chr (Driver *drvthis, int x, int y, char c)$/
t6963_clear	t6963.c	/^t6963_clear (Driver *drvthis)$/
t6963_close	t6963.c	/^t6963_close (Driver *drvthis)$/
T6963_CONTROL_PORT	t6963.h	/^#define T6963_CONTROL_PORT(p) ((p)+2)$/
T6963_DATAIN	t6963.h	/^#define T6963_DATAIN(p)  port_out(T6963_CONTROL_PO/
T6963_DATAOUT	t6963.h	/^#define T6963_DATAOUT(p) port_out(T6963_CONTROL_PO/
T6963_DATA_PORT	t6963.h	/^#define T6963_DATA_PORT(p) (p)$/
t6963_flush	t6963.c	/^t6963_flush (Driver *drvthis)$/
t6963_graphic_clear	t6963.c	/^t6963_graphic_clear(Driver *drvthis, int x1, int y/
t6963_hbar	t6963.c	/^t6963_hbar (Driver *drvthis, int x, int y, int len/
t6963_height	t6963.c	/^t6963_height (Driver *drvthis)$/
t6963_icon	t6963.c	/^t6963_icon (Driver *drvthis, int x, int y, int ico/
t6963_init	t6963.c	/^t6963_init (Driver *drvthis)$/
t6963_low_command_2_bytes	t6963.c	/^t6963_low_command_2_bytes(Driver *drvthis, u8 cmd,/
t6963_low_command_byte	t6963.c	/^t6963_low_command_byte(Driver *drvthis, u8 cmd, u8/
t6963_low_command	t6963.c	/^t6963_low_command (Driver *drvthis, u8 byte)$/
t6963_low_command_word	t6963.c	/^t6963_low_command_word(Driver *drvthis, u8 cmd, u1/
t6963_low_data	t6963.c	/^t6963_low_data (Driver *drvthis, u8 byte)$/
t6963_low_disable_mode	t6963.c	/^t6963_low_disable_mode (Driver *drvthis, u8 mode)$/
t6963_low_dsp_ready	t6963.c	/^t6963_low_dsp_ready (Driver *drvthis)$/
t6963_low_enable_mode	t6963.c	/^t6963_low_enable_mode (Driver *drvthis, u8 mode)$/
t6963_low_set_control	t6963.c	/^t6963_low_set_control(Driver *drvthis, char wr, ch/
t6963_num	t6963.c	/^t6963_num (Driver *drvthis, int x, int num)$/
t6963_set_char	t6963.c	/^t6963_set_char (Driver *drvthis, int n, char *dat)/
t6963_set_nchar	t6963.c	/^t6963_set_nchar (Driver *drvthis, int n, char *dat/
T6963_STATUS_PORT	t6963.h	/^#define T6963_STATUS_PORT(p) ((p)+1)$/
t6963_string	t6963.c	/^t6963_string (Driver *drvthis, int x, int y, char /
t6963_swap_buffers	t6963.c	/^t6963_swap_buffers (Driver *drvthis)$/
t6963_vbar	t6963.c	/^t6963_vbar (Driver *drvthis, int x, int y, int len/
t6963_width	t6963.c	/^t6963_width (Driver *drvthis)$/
tablist2linkedlist	menuitem.c	/^LinkedList * tablist2linkedlist (char *strings)$/
test_func_func	client_commands.c	/^test_func_func (Client * c, int argc, char **argv)/
test_packet	CFontz633io.c	/^test_packet(int fd, unsigned char response, COMMAN/
text_backlight	text.c	/^text_backlight (Driver *drvthis, int on)$/
text_chr	text.c	/^text_chr (Driver *drvthis, int x, int y, char c)$/
text_clear	text.c	/^text_clear (Driver *drvthis)$/
text_close	text.c	/^text_close (Driver *drvthis)$/
text_flush	text.c	/^text_flush (Driver *drvthis)$/
text_height	text.c	/^text_height (Driver *drvthis)$/
text_init	text.c	/^text_init (Driver *drvthis)$/
text_set_contrast	text.c	/^text_set_contrast (Driver *drvthis, int promille)$/
text_string	text.c	/^text_string (Driver *drvthis, int x, int y, char s/
text_width	text.c	/^text_width (Driver *drvthis)$/
timeradd	timing.h	/^# define timeradd(a, b, result)                   /
timerclear	timing.h	/^# define timerclear(tvp)        ((tvp)->tv_sec = (/
timercmp	timing.h	/^# define timercmp(a, b, CMP)                      /
timerisset	timing.h	/^# define timerisset(tvp)        ((tvp)->tv_sec || /
timersub	timing.h	/^# define timersub(a, b, result)                   /
time_screen	chrono.c	/^time_screen (int rep, int display, int *flags_ptr)/
timestamp	pylcd.c	/^unsigned long long timestamp(PrivateData *s/
timing_init	timing.h	/^static inline int timing_init() {$/
timing_uPause	timing.h	/^static inline void timing_uPause (int usecs) {$/
tyan_lcdm_backlight	tyan_lcdm.c	/^tyan_lcdm_backlight (Driver * drvthis, int on)$/
tyan_lcdm_chr	tyan_lcdm.c	/^tyan_lcdm_chr (Driver * drvthis, int x, int y, cha/
tyan_lcdm_clear	tyan_lcdm.c	/^tyan_lcdm_clear (Driver * drvthis)$/
tyan_lcdm_close	tyan_lcdm.c	/^tyan_lcdm_close (Driver * drvthis)$/
tyan_lcdm_flush	tyan_lcdm.c	/^tyan_lcdm_flush (Driver * drvthis)$/
tyan_lcdm_get_key	tyan_lcdm.c	/^tyan_lcdm_get_key (Driver *drvthis)$/
tyan_lcdm_hardware_clear	tyan_lcdm.c	/^tyan_lcdm_hardware_clear(int fd)$/
tyan_lcdm_hbar	tyan_lcdm.c	/^tyan_lcdm_hbar (Driver * drvthis, int x, int y, in/
tyan_lcdm_height	tyan_lcdm.c	/^tyan_lcdm_height (Driver *drvthis)$/
tyan_lcdm_icon	tyan_lcdm.c	/^tyan_lcdm_icon (Driver * drvthis, int x, int y, in/
tyan_lcdm_init_hbar	tyan_lcdm.c	/^tyan_lcdm_init_hbar (Driver * drvthis)$/
tyan_lcdm_init	tyan_lcdm.c	/^tyan_lcdm_init (Driver * drvthis, char *args)$/
tyan_lcdm_init_vbar	tyan_lcdm.c	/^tyan_lcdm_init_vbar (Driver * drvthis)$/
tyan_lcdm_num	tyan_lcdm.c	/^tyan_lcdm_num (Driver * drvthis, int x, int num)$/
tyan_lcdm_read_key	tyan_lcdm.c	/^unsigned char tyan_lcdm_read_key(int fd)$/
tyan_lcdm_set_char	tyan_lcdm.c	/^tyan_lcdm_set_char (Driver * drvthis, int n, char /
tyan_lcdm_set_cursor	tyan_lcdm.c	/^void tyan_lcdm_set_cursor(int fd, unsigned char st/
tyan_lcdm_set_rampos	tyan_lcdm.c	/^void tyan_lcdm_set_rampos(int fd, unsigned char po/
tyan_lcdm_string	tyan_lcdm.c	/^tyan_lcdm_string (Driver * drvthis, int x, int y, /
tyan_lcdm_switch_mode	tyan_lcdm.c	/^tyan_lcdm_switch_mode(int fd)$/
tyan_lcdm_vbar	tyan_lcdm.c	/^tyan_lcdm_vbar (Driver * drvthis, int x, int y, in/
tyan_lcdm_width	tyan_lcdm.c	/^tyan_lcdm_width (Driver *drvthis)$/
tyan_lcdm_write_str	tyan_lcdm.c	/^void tyan_lcdm_write_str(int fd, unsigned char *st/
ula200_backlight	ula200.c	/^ula200_backlight (Driver *drvthis, int on)$/
ula200_chr	ula200.c	/^ula200_chr (Driver *drvthis, int x, int y, char ch/
ula200_clear	ula200.c	/^ula200_clear (Driver *drvthis)$/
ula200_close	ula200.c	/^ula200_close(Driver *drvthis)$/
ula200_flush	ula200.c	/^ula200_flush(Driver *drvthis)$/
ula200_ftdi_clear	ula200.c	/^ula200_ftdi_clear(Driver *drvthis)$/
ula200_ftdi_enable_raw_mode	ula200.c	/^ula200_ftdi_enable_raw_mode(Driver *drvthis)$/
ula200_ftdi_position	ula200.c	/^ula200_ftdi_position(Driver *drvthis, int x, int y/
ula200_ftdi_rawdata	ula200.c	/^ula200_ftdi_rawdata(Driver *drvthis, unsigned char/
ula200_ftdi_read_response	ula200.c	/^ula200_ftdi_read_response(Driver *drvthis)$/
ula200_ftdi_string	ula200.c	/^ula200_ftdi_string(Driver *drvthis, unsigned char /
ula200_ftdi_usb_read	ula200.c	/^ula200_ftdi_usb_read(PrivateData *p)$/
ula200_ftdi_write_command	ula200.c	/^ula200_ftdi_write_command(Driver *drvthis, unsigne/
ula200_get_key	ula200.c	/^ula200_get_key (Driver *drvthis)$/
ula200_height	ula200.c	/^ula200_height (Driver *drvthis)$/
ula200_icon	ula200.c	/^ula200_icon (Driver *drvthis, int x, int y, int ic/
ula200_init	ula200.c	/^ula200_init(Driver *drvthis)$/
ula200_load_curstom_chars	ula200.c	/^ula200_load_curstom_chars(Driver *drvthis)$/
ula200_string	ula200.c	/^ula200_string (Driver *drvthis, int x, int y, char/
ula200_width	ula200.c	/^ula200_width (Driver *drvthis)$/
uPause	hd44780.c	/^uPause (PrivateData *p, int usecs)$/
update_screen	mode.c	/^update_screen(mode *m, int display)$/
update_server_screen	serverscreens.c	/^update_server_screen ()$/
uptime_screen	chrono.c	/^uptime_screen (int rep, int display, int *flags_pt/
ValidX	CwLnx.c	/^#define ValidX(x) if ((x) > p->width) { (x) = p->w/
ValidY	CwLnx.c	/^#define ValidY(y) if ((y) > p->height) { (y) = p->/
vasnprintf	snprintf.c	/^int vasnprintf (char **ptr, size_t str_m, const ch/
vasprintf	snprintf.c	/^int vasprintf(char **ptr, const char *fmt, va_list/
verify_ipv4	sock.c	/^int verify_ipv4(const char *addr) $/
verify_ipv6	sock.c	/^int verify_ipv6(const char *addr) $/
wave_to_parent	main.c	/^wave_to_parent(pid_t parent_pid)$/
widget_add_func	widget_commands.c	/^widget_add_func (Client * c, int argc, char **argv/
widget_create	widget.c	/^widget_create (char *id, WidgetType type, Screen */
widget_del_func	widget_commands.c	/^widget_del_func (Client * c, int argc, char **argv/
widget_destroy	widget.c	/^widget_destroy (Widget * w)$/
widget_iconname_to_icon	widget.c	/^int widget_iconname_to_icon (char *iconname)$/
widget_icon_to_iconname	widget.c	/^char *widget_icon_to_iconname (int icon)$/
widget_search_subs	widget.c	/^widget_search_subs (Widget * w, char * id)$/
widget_set_func	widget_commands.c	/^widget_set_func (Client * c, int argc, char **argv/
widget_typename_to_type	widget.c	/^widget_typename_to_type (char * typename)$/
widget_type_to_typename	widget.c	/^widget_type_to_typename (WidgetType t)$/
writeChar	hd44780-lis2.c	/^void writeChar(int fd, int code)$/
writecommand	sed1520.c	/^writecommand (unsigned int port, int value, int ch/
writedata	sed1520.c	/^writedata (unsigned int port, int value, int chip)/
Write_LCD	CwLnx.c	/^int Write_LCD(int fd, char *c, int size)$/
xload_screen	load.c	/^xload_screen (int rep, int display, int *flags_ptr/
xosdlib_drv_backlight	xosdlib_drv.c	/^xosdlib_drv_backlight (Driver *drvthis, int on)$/
xosdlib_drv_chr	xosdlib_drv.c	/^xosdlib_drv_chr (Driver *drvthis, int x, int y, ch/
xosdlib_drv_clear	xosdlib_drv.c	/^xosdlib_drv_clear (Driver * drvthis)$/
xosdlib_drv_close	xosdlib_drv.c	/^xosdlib_drv_close (Driver *drvthis)$/
xosdlib_drv_flush	xosdlib_drv.c	/^xosdlib_drv_flush (Driver *drvthis)$/
xosdlib_drv_get_brightness	xosdlib_drv.c	/^xosdlib_drv_get_brightness(Driver *drvthis, int st/
xosdlib_drv_get_contrast	xosdlib_drv.c	/^xosdlib_drv_get_contrast (Driver *drvthis)$/
xosdlib_drv_hbar	xosdlib_drv.c	/^xosdlib_drv_hbar (Driver *drvthis, int x, int y, i/
xosdlib_drv_height	xosdlib_drv.c	/^xosdlib_drv_height (Driver *drvthis)$/
xosdlib_drv_init	xosdlib_drv.c	/^xosdlib_drv_init (Driver *drvthis)$/
xosdlib_drv_old_num	xosdlib_drv.c	/^xosdlib_drv_old_num (Driver *drvthis, int x, int n/
xosdlib_drv_set_brightness	xosdlib_drv.c	/^xosdlib_drv_set_brightness(Driver *drvthis, int st/
xosdlib_drv_set_contrast	xosdlib_drv.c	/^xosdlib_drv_set_contrast (Driver *drvthis, int pro/
xosdlib_drv_string	xosdlib_drv.c	/^xosdlib_drv_string (Driver *drvthis, int x, int y,/
xosdlib_drv_vbar	xosdlib_drv.c	/^xosdlib_drv_vbar (Driver *drvthis, int x, int y, i/
xosdlib_drv_width	xosdlib_drv.c	/^xosdlib_drv_width (Driver *drvthis)$/
